{"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7CA;IAEIvsB,SAASosB,QAAQ;IACjBoD,yBAAyBpD,QAAQ;IAEjCqD,iBAAiBrD,QAAQ;IACzBsD,cAActD,QAAQ;IACtBC,OAAOD,QAAQ;IAEf1oB,QAAQtI,MAAMuF,UAAU+C;IAExBisB,WAAWD;IAEXE,gBAAgB,cAAcC,OAAOC;;EACxCN,uBAAuBK;MACnBE,OAAOrsB,MAAM1N,KAAKyK,WAAW;SAC1BkvB,SAASlyB,MAAMoyB,OAAOE;;AAG9B/vB,OAAO4vB;EACNF,aAAaA;EACbD,gBAAgBA;EAChBpD,MAAMA;;AAGP52B,OAAOsK,UAAU6vB;;;ACzBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChzHA;AACA;AACA;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACbzUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzCA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnDA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnBA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5CA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzEA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACVA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClCA;AACA;AACA;AACA;AACA;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;IAEI5vB,SAASosB,QAAQ;IACjBsD,cAActD,QAAQ;AAE1B32B,OAAOsK,UAAU;MACZ4vB,WAAWD;EAEf1vB,OAAO5E,MAAMuF;IAAaqD,MAAM2rB;;IAC/B3rB,MAAM;aACE5I,MAAMuF,UAAUqD,SAAS2rB;;;SAI3BA","sources":["./node_modules/@parcel/runtime-browser-hmr/lib/HMRRuntime.js","./index.js","./node_modules/lightgallery/lightgallery.umd.js","./node_modules/src/lgQuery.ts","./node_modules/src/lg-utils.ts","./node_modules/src/lg-settings.ts","./node_modules/src/lg-events.ts","./node_modules/src/lightgallery.ts","./node_modules/src/index.ts","./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.umd.js","./node_modules/src/plugins/thumbnail/lg-thumbnail-settings.ts","./node_modules/src/plugins/thumbnail/lg-thumbnail.ts","./node_modules/lightgallery/plugins/zoom/lg-zoom.umd.js","./node_modules/src/plugins/zoom/lg-zoom-settings.ts","./node_modules/src/plugins/zoom/lg-zoom.ts","./node_modules/lightgallery/plugins/autoplay/lg-autoplay.umd.js","./node_modules/src/plugins/autoplay/lg-autoplay-settings.ts","./node_modules/src/plugins/autoplay/lg-autoplay.ts","./node_modules/lightgallery/plugins/rotate/lg-rotate.umd.js","./node_modules/src/plugins/rotate/lg-rotate-settings.ts","./node_modules/src/plugins/rotate/lg-rotate.ts","./node_modules/backpax/lib/index.js","./node_modules/backpax/src/index.ts","./node_modules/backpax/lib/util.js","./node_modules/backpax/src/util.ts","./node_modules/@parcel/transformer-js/lib/esmodule-helpers.js","./node_modules/es6-object-assign/index.js","./node_modules/array.prototype.find/index.js","./node_modules/define-properties/index.js","./node_modules/object-keys/index.js","./node_modules/object-keys/isArguments.js","./node_modules/object-keys/implementation.js","./node_modules/es-abstract/2019/RequireObjectCoercible.js","./node_modules/es-abstract/5/CheckObjectCoercible.js","./node_modules/get-intrinsic/index.js","./node_modules/has-symbols/index.js","./node_modules/has-symbols/shams.js","./node_modules/function-bind/index.js","./node_modules/function-bind/implementation.js","./node_modules/has/src/index.js","./node_modules/array.prototype.find/implementation.js","./node_modules/es-abstract/2019/ToObject.js","./node_modules/es-abstract/2019/ToLength.js","./node_modules/es-abstract/helpers/maxSafeInteger.js","./node_modules/es-abstract/2019/ToInteger.js","./node_modules/es-abstract/5/ToInteger.js","./node_modules/es-abstract/5/abs.js","./node_modules/es-abstract/5/floor.js","./node_modules/es-abstract/5/ToNumber.js","./node_modules/es-abstract/5/ToPrimitive.js","./node_modules/es-to-primitive/es5.js","./node_modules/es-to-primitive/helpers/isPrimitive.js","./node_modules/is-callable/index.js","./node_modules/es-abstract/helpers/isNaN.js","./node_modules/es-abstract/helpers/isFinite.js","./node_modules/es-abstract/helpers/sign.js","./node_modules/es-abstract/2019/ToNumber.js","./node_modules/call-bind/callBound.js","./node_modules/call-bind/index.js","./node_modules/es-abstract/helpers/regexTester.js","./node_modules/es-abstract/helpers/isPrimitive.js","./node_modules/es-abstract/2019/ToPrimitive.js","./node_modules/es-to-primitive/es2015.js","./node_modules/is-date-object/index.js","./node_modules/is-symbol/index.js","./node_modules/es-abstract/2019/IsCallable.js","./node_modules/array.prototype.find/polyfill.js","./node_modules/array.prototype.find/shim.js"],"sourcesContent":[null,null,null,"interface Offset {\n    left: number;\n    top: number;\n}\n\n(function () {\n    if (typeof window.CustomEvent === 'function') return false;\n\n    function CustomEvent(event: string, params: any) {\n        params = params || { bubbles: false, cancelable: false, detail: null };\n        const evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(\n            event,\n            params.bubbles,\n            params.cancelable,\n            params.detail,\n        );\n        return evt;\n    }\n\n    window.CustomEvent = CustomEvent as any;\n})();\n(function () {\n    if (!Element.prototype.matches) {\n        Element.prototype.matches =\n            (Element.prototype as any).msMatchesSelector ||\n            Element.prototype.webkitMatchesSelector;\n    }\n})();\n\nexport type LgQuery = (selector: any) => lgQuery;\nexport class lgQuery {\n    static eventListeners: { [key: string]: any[] } = {};\n    static generateUUID(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n            /[xy]/g,\n            function (c) {\n                const r = (Math.random() * 16) | 0,\n                    v = c == 'x' ? r : (r & 0x3) | 0x8;\n                return v.toString(16);\n            },\n        );\n    }\n\n    private selector: any;\n    private firstElement: any;\n    private cssVenderPrefixes: string[] = [\n        'TransitionDuration',\n        'TransitionTimingFunction',\n        'Transform',\n        'Transition',\n    ];\n    constructor(selector: string | Element) {\n        this.selector = this._getSelector(selector);\n        this.firstElement = this._getFirstEl();\n        return this;\n    }\n\n    private _getSelector(\n        selector: string | Element,\n        context: Element | Document = document,\n    ): Element | null | NodeListOf<Element> {\n        if (typeof selector !== 'string') {\n            return selector;\n        }\n        context = context || document;\n        const fl = selector.substring(0, 1);\n        if (fl === '#') {\n            return context.querySelector(selector);\n        } else {\n            return context.querySelectorAll(selector);\n        }\n    }\n\n    private _each(\n        func: (\n            elements: Element | NodeListOf<Element> | null,\n            index: number,\n        ) => void,\n    ): this {\n        if (!this.selector) {\n            return this;\n        }\n        if (this.selector.length !== undefined) {\n            [].forEach.call(this.selector, func);\n        } else {\n            func(this.selector, 0);\n        }\n        return this;\n    }\n\n    private _setCssVendorPrefix(\n        el: any,\n        cssProperty: string,\n        value?: string | number,\n    ): void {\n        // prettier-ignore\n        const property = cssProperty.replace(/-([a-z])/gi, function (\n            s,\n            group1,\n        ) {\n            return group1.toUpperCase();\n        });\n        if (this.cssVenderPrefixes.indexOf(property) !== -1) {\n            el.style[\n                property.charAt(0).toLowerCase() + property.slice(1)\n            ] = value;\n            el.style['webkit' + property] = value;\n            el.style['moz' + property] = value;\n            el.style['ms' + property] = value;\n            el.style['o' + property] = value;\n        } else {\n            el.style[property] = value;\n        }\n    }\n\n    private _getFirstEl() {\n        if (this.selector && this.selector.length !== undefined) {\n            return this.selector[0];\n        } else {\n            return this.selector;\n        }\n    }\n\n    private isEventMatched(event: string, eventName: string): boolean {\n        const eventNamespace = eventName.split('.');\n        return event\n            .split('.')\n            .filter((e) => e)\n            .every((e) => {\n                return eventNamespace.indexOf(e) !== -1;\n            });\n    }\n\n    attr(attr: string): string;\n    attr(attr: string, value: string | number | boolean): this;\n    attr(attr: string, value?: string | number | boolean): string | this {\n        if (value === undefined) {\n            if (!this.firstElement) {\n                return '';\n            }\n            return this.firstElement.getAttribute(attr);\n        }\n        this._each((el: any) => {\n            el.setAttribute(attr, value);\n        });\n        return this;\n    }\n\n    find(selector: any): lgQuery {\n        return $LG(this._getSelector(selector, this.selector));\n    }\n\n    first(): lgQuery {\n        if (this.selector && this.selector.length !== undefined) {\n            return $LG(this.selector[0]);\n        } else {\n            return $LG(this.selector);\n        }\n    }\n\n    eq(index: number): lgQuery {\n        return $LG(this.selector[index]);\n    }\n\n    parent(): lgQuery {\n        return $LG(this.selector.parentElement);\n    }\n\n    get(): HTMLElement {\n        return this._getFirstEl();\n    }\n\n    removeAttr(attributes: string): this {\n        const attrs = attributes.split(' ');\n        this._each((el: any) => {\n            attrs.forEach((attr: string) => el.removeAttribute(attr));\n        });\n        return this;\n    }\n\n    wrap(className: string): this {\n        if (!this.firstElement) {\n            return this;\n        }\n        const wrapper = document.createElement('div');\n        wrapper.className = className;\n        this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);\n        this.firstElement.parentNode.removeChild(this.firstElement);\n        wrapper.appendChild(this.firstElement);\n        return this;\n    }\n\n    addClass(classNames = ''): this {\n        this._each((el: any) => {\n            // IE doesn't support multiple arguments\n            classNames.split(' ').forEach((className) => {\n                el.classList.add(className);\n            });\n        });\n        return this;\n    }\n\n    removeClass(classNames: string): this {\n        this._each((el: any) => {\n            // IE doesn't support multiple arguments\n            classNames.split(' ').forEach((className) => {\n                el.classList.remove(className);\n            });\n        });\n        return this;\n    }\n\n    hasClass(className: string): boolean {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.classList.contains(className);\n    }\n    hasAttribute(attribute: string): boolean {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.hasAttribute(attribute);\n    }\n    toggleClass(className: string): this {\n        if (!this.firstElement) {\n            return this;\n        }\n        if (this.hasClass(className)) {\n            this.removeClass(className);\n        } else {\n            this.addClass(className);\n        }\n        return this;\n    }\n\n    css(property: string, value?: string | number): this {\n        this._each((el: any) => {\n            this._setCssVendorPrefix(el, property, value);\n        });\n        return this;\n    }\n    // Need to pass separate namespaces for separate elements\n    on(events: string, listener: (e: any) => void): this {\n        if (!this.selector) {\n            return this;\n        }\n        events.split(' ').forEach((event: string) => {\n            if (!Array.isArray(lgQuery.eventListeners[event])) {\n                lgQuery.eventListeners[event] = [];\n            }\n            lgQuery.eventListeners[event].push(listener);\n            this.selector.addEventListener(event.split('.')[0], listener);\n        });\n\n        return this;\n    }\n    // @todo - test this\n    once(event: string, listener: (e: any) => void): this {\n        this.on(event, () => {\n            this.off(event);\n            listener(event);\n        });\n        return this;\n    }\n    off(event: string): this {\n        if (!this.selector) {\n            return this;\n        }\n        Object.keys(lgQuery.eventListeners).forEach((eventName) => {\n            if (this.isEventMatched(event, eventName)) {\n                lgQuery.eventListeners[eventName].forEach((listener) => {\n                    this.selector.removeEventListener(\n                        eventName.split('.')[0],\n                        listener,\n                    );\n                });\n                lgQuery.eventListeners[eventName] = [];\n            }\n        });\n\n        return this;\n    }\n    trigger<Detail>(event: string, detail?: Detail): this {\n        if (!this.firstElement) {\n            return this;\n        }\n\n        const customEvent = new CustomEvent(event.split('.')[0], {\n            detail: detail || null,\n        });\n        this.firstElement.dispatchEvent(customEvent);\n        return this;\n    }\n\n    // Does not support IE\n    load(url: string): this {\n        fetch(url).then((res) => {\n            this.selector.innerHTML = res;\n        });\n        return this;\n    }\n\n    html(): string;\n    html(html: string): this;\n    html(html?: string): string | this {\n        if (html === undefined) {\n            if (!this.firstElement) {\n                return '';\n            }\n            return this.firstElement.innerHTML;\n        }\n        this._each((el: any) => {\n            el.innerHTML = html;\n        });\n        return this;\n    }\n    append(html: string | HTMLElement): this {\n        this._each((el: any) => {\n            if (typeof html === 'string') {\n                el.insertAdjacentHTML('beforeend', html);\n            } else {\n                el.appendChild(html);\n            }\n        });\n        return this;\n    }\n    prepend(html: string): this {\n        this._each((el: any) => {\n            el.insertAdjacentHTML('afterbegin', html);\n        });\n        return this;\n    }\n    remove(): this {\n        this._each((el: any) => {\n            el.parentNode.removeChild(el);\n        });\n        return this;\n    }\n    empty(): this {\n        this._each((el: any) => {\n            el.innerHTML = '';\n        });\n        return this;\n    }\n    // Supports only window\n    scrollTop(): number;\n    scrollTop(scrollTop: number): this;\n    scrollTop(scrollTop?: number): number | this {\n        if (scrollTop !== undefined) {\n            document.body.scrollTop = scrollTop;\n            document.documentElement.scrollTop = scrollTop;\n            return this;\n        } else {\n            return (\n                window.pageYOffset ||\n                document.documentElement.scrollTop ||\n                document.body.scrollTop ||\n                0\n            );\n        }\n    }\n    // Supports only window\n    scrollLeft(): number;\n    scrollLeft(scrollLeft?: number): this;\n    scrollLeft(scrollLeft?: number): number | this {\n        if (scrollLeft !== undefined) {\n            document.body.scrollLeft = scrollLeft;\n            document.documentElement.scrollLeft = scrollLeft;\n            return this;\n        } else {\n            return (\n                window.pageXOffset ||\n                document.documentElement.scrollLeft ||\n                document.body.scrollLeft ||\n                0\n            );\n        }\n    }\n    offset(): Offset {\n        if (!this.firstElement) {\n            return {\n                left: 0,\n                top: 0,\n            };\n        }\n        const rect = this.firstElement.getBoundingClientRect();\n        const bodyMarginLeft = $LG('body').style().marginLeft;\n\n        // Minus body margin - https://stackoverflow.com/questions/30711548/is-getboundingclientrect-left-returning-a-wrong-value\n        return {\n            left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),\n            top: rect.top + this.scrollTop(),\n        };\n    }\n    style(): CSSStyleDeclaration {\n        if (!this.firstElement) {\n            return {} as CSSStyleDeclaration;\n        }\n        return (\n            this.firstElement.currentStyle ||\n            window.getComputedStyle(this.firstElement)\n        );\n    }\n    // Width without padding and border even if box-sizing is used.\n    width(): number {\n        const style = this.style();\n        return (\n            this.firstElement.clientWidth -\n            parseFloat(style.paddingLeft) -\n            parseFloat(style.paddingRight)\n        );\n    }\n    // Height without padding and border even if box-sizing is used.\n    height(): number {\n        const style = this.style();\n        return (\n            this.firstElement.clientHeight -\n            parseFloat(style.paddingTop) -\n            parseFloat(style.paddingBottom)\n        );\n    }\n}\n\nexport function $LG(selector: any): lgQuery {\n    return new lgQuery(selector);\n}\n","import { $LG, lgQuery } from './lgQuery';\nimport { VideoSource } from './plugins/video/types';\nimport { VideoInfo } from './types';\nexport interface ImageSize {\n    width: number;\n    height: number;\n}\n\nexport interface ImageSources {\n    media?: string;\n    srcset: string;\n    sizes?: string;\n    type?: string;\n}\n\nexport interface GalleryItem {\n    /**\n     * url of the media\n     * @data-attr data-src\n     */\n    src: string;\n\n    /**\n     * Source attributes for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attributes\">picture</a> element\n     * @data-attr data-sources\n     */\n    sources: ImageSources[];\n\n    /**\n     * Thumbnail url\n     * @data-attr data-thumb\n     */\n    thumb: string;\n\n    /**\n     * alt attribute for the image\n     * @data-attr alt\n     */\n    alt: string;\n\n    /**\n     * Title attribute for the video\n     * @data-attr thumb\n     */\n    title: string;\n\n    /**\n     * Title for iframe\n     * @data-attr data-iframe-title\n     */\n    iframeTitle: string;\n\n    /**\n     * Caption for the slide\n     * @description You can either pass the HTML markup or the ID or class name of the element which contains the captions\n     * @data-attr data-sub-html\n     */\n    subHtml: string;\n\n    /**\n     * url of the file which contain the sub html.\n     * @description Note - Does not support Internet Explorer browser\n     * @data-attr data-sub-html-url\n     */\n    subHtmlUrl: string;\n\n    /**\n     * Video source\n     * @data-attr data-video\n     */\n    video: VideoSource;\n\n    /**\n     * Poster url\n     * @data-attr data-poster\n     */\n    poster: string;\n\n    /**\n     * Custom slide name to use in the url when hash plugin is enabled\n     * @data-attr data-slide-name\n     */\n    slideName: string;\n\n    /**\n     * List of images and viewport's max width separated by comma.\n     * @description Ex: img/1-375.jpg 375, img/1-480.jpg 480, img/1-757.jpg 757.\n     * @data-attr data-responsive\n     */\n    responsive: string;\n\n    /**\n     * srcset attribute values for the main image\n     * @data-attr data-srcset\n     */\n    srcset: string;\n\n    /**\n     * srcset sizes attribute for the main image\n     * @data-attr data-sizes\n     */\n    sizes: string;\n\n    /**\n     * Set true is you want to open your url in an iframe\n     * @data-attr data-iframe\n     */\n    iframe: boolean;\n\n    /**\n     * Download url for your image/video.\n     * @description Pass false if you want to hide the download button.\n     * @data-attr data-download-url\n     */\n    downloadUrl: string | boolean;\n\n    /**\n     * Actual size of the image in px.\n     * @description This is used in zoom plugin to see the actual size of the image when double taped on the image.\n     * @data-attr data-width\n     */\n    width: string;\n\n    /**\n     * Facebook share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL is taken.\n     * @data-attr data-facebook-share-url\n     */\n    facebookShareUrl: string;\n\n    /**\n     * Tweet text\n     * @data-attr data-tweet-text\n     */\n    tweetText: string;\n\n    /**\n     * Twitter share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL will be taken.\n     * @data-attr data-twitter-share-url\n     */\n    twitterShareUrl: string;\n\n    /**\n     * Pinterest share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL will be taken.\n     * Note: Pinterest requires absolute URL\n     * @data-attr data-pinterest-share-url\n     */\n    pinterestShareUrl: string;\n\n    /**\n     * Description for Pinterest post.\n     * @data-attr data-pinterest-text\n     */\n    pinterestText: string;\n\n    /**\n     * Facebook comments body html\n     * @description Please refer <a href=\"https://developers.facebook.com/docs/plugins/comments/#comments-plugin\">facebook official documentation</a> for generating the HTML markup\n     * @example\n     * <div\n     *      class=\"fb-comments\"\n     *      data-href=\"https://www.lightgalleryjs.com/demos/comment-box/#facebook-comments-demo\"\n     *      data-width=\"400\"\n     *      data-numposts=\"5\">\n     * </div>\n     * @data-attr data-fb-html\n     */\n    fbHtml: string;\n\n    /**\n     * Disqus page identifier\n     * @description Please refer official <a href=\"https://help.disqus.com/en/articles/1717084-javascript-configuration-variables\">disqus documentation</a> for more info\n     * @data-attr data-disqus-identifier\n     */\n    disqusIdentifier: string;\n\n    /**\n     * Disqus page url\n     * @description Please refer official <a href=\"https://help.disqus.com/en/articles/1717084-javascript-configuration-variables\">disqus documentation</a> for more info\n     * @data-attr data-disqus-url\n     */\n    disqusUrl: string;\n\n    __slideVideoInfo?: VideoInfo;\n    [key: string]: any;\n}\n\nconst defaultDynamicOptions = [\n    'src',\n    'sources',\n    'subHtml',\n    'subHtmlUrl',\n    'html',\n    'video',\n    'poster',\n    'slideName',\n    'responsive',\n    'srcset',\n    'sizes',\n    'iframe',\n    'downloadUrl',\n    'width',\n    'facebookShareUrl',\n    'tweetText',\n    'iframeTitle',\n    'twitterShareUrl',\n    'pinterestShareUrl',\n    'pinterestText',\n    'fbHtml',\n    'disqusIdentifier',\n    'disqusUrl',\n];\n\n// Convert html data-attribute to camalcase\nexport function convertToData(attr: string): string {\n    // FInd a way for lgsize\n    if (attr === 'href') {\n        return 'src';\n    }\n    attr = attr.replace('data-', '');\n    attr = attr.charAt(0).toLowerCase() + attr.slice(1);\n    attr = attr.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n\n    return attr;\n}\n\nconst utils = {\n    /**\n     * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option\n     */\n    getSize(\n        el: HTMLElement,\n        container: lgQuery,\n        spacing = 0,\n        defaultLgSize?: string,\n    ): ImageSize | undefined {\n        const LGel = $LG(el);\n        let lgSize = LGel.attr('data-lg-size') || defaultLgSize;\n\n        if (!lgSize) {\n            return;\n        }\n\n        const isResponsiveSizes = lgSize.split(',');\n        // if at-least two viewport sizes are available\n        if (isResponsiveSizes[1]) {\n            const wWidth = window.innerWidth;\n            for (let i = 0; i < isResponsiveSizes.length; i++) {\n                const size = isResponsiveSizes[i];\n                const responsiveWidth = parseInt(size.split('-')[2], 10);\n                if (responsiveWidth > wWidth) {\n                    lgSize = size;\n                    break;\n                }\n\n                // take last item as last option\n                if (i === isResponsiveSizes.length - 1) {\n                    lgSize = size;\n                }\n            }\n        }\n\n        const size = lgSize.split('-');\n\n        const width = parseInt(size[0], 10);\n        const height = parseInt(size[1], 10);\n\n        const cWidth = container.width();\n        const cHeight = container.height() - spacing;\n\n        const maxWidth = Math.min(cWidth, width);\n        const maxHeight = Math.min(cHeight, height);\n\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\n\n        return { width: width * ratio, height: height * ratio };\n    },\n\n    /**\n     * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option\n     * @param {jQuery Element}\n     * @returns {String} Transform CSS string\n     */\n    getTransform(\n        el: HTMLElement,\n        container: lgQuery,\n        top: number,\n        bottom: number,\n        imageSize?: ImageSize,\n    ): string | undefined {\n        if (!imageSize) {\n            return;\n        }\n        const LGel = $LG(el).find('img').first();\n        if (!LGel.get()) {\n            return;\n        }\n\n        const containerRect = container.get().getBoundingClientRect();\n\n        const wWidth = containerRect.width;\n\n        // using innerWidth to include mobile safari bottom bar\n        const wHeight = container.height() - (top + bottom);\n\n        const elWidth = LGel.width();\n        const elHeight = LGel.height();\n\n        const elStyle = LGel.style();\n        let x =\n            (wWidth - elWidth) / 2 -\n            LGel.offset().left +\n            (parseFloat(elStyle.paddingLeft) || 0) +\n            (parseFloat(elStyle.borderLeft) || 0) +\n            $LG(window).scrollLeft() +\n            containerRect.left;\n        let y =\n            (wHeight - elHeight) / 2 -\n            LGel.offset().top +\n            (parseFloat(elStyle.paddingTop) || 0) +\n            (parseFloat(elStyle.borderTop) || 0) +\n            $LG(window).scrollTop() +\n            top;\n\n        const scX = elWidth / imageSize.width;\n        const scY = elHeight / imageSize.height;\n\n        const transform =\n            'translate3d(' +\n            (x *= -1) +\n            'px, ' +\n            (y *= -1) +\n            'px, 0) scale3d(' +\n            scX +\n            ', ' +\n            scY +\n            ', 1)';\n        return transform;\n    },\n\n    getIframeMarkup(\n        src: string,\n        iframeWidth: string,\n        iframeHeight: string,\n        iframeTitle?: string,\n    ): string {\n        const title = iframeTitle ? 'title=\"' + iframeTitle + '\"' : '';\n        return `<div class=\"lg-video-cont lg-has-iframe\" style=\"width:${iframeWidth}; height: ${iframeHeight}\">\n                    <iframe class=\"lg-object\" frameborder=\"0\" ${title} src=\"${src}\"  allowfullscreen=\"true\"></iframe>\n                </div>`;\n    },\n\n    getImgMarkup(\n        index: number,\n        src: string,\n        altAttr: string,\n        srcset: string,\n        sizes: string,\n        sources?: ImageSources[],\n    ): string {\n        const srcsetAttr = srcset ? `srcset=\"${srcset}\"` : '';\n        const sizesAttr = sizes ? `sizes=\"${sizes}\"` : '';\n        const imgMarkup = `<img ${altAttr} ${srcsetAttr}  ${sizesAttr} class=\"lg-object lg-image\" data-index=\"${index}\" src=\"${src}\" />`;\n        let sourceTag = '';\n        if (sources) {\n            const sourceObj =\n                typeof sources === 'string' ? JSON.parse(sources) : sources;\n\n            sourceTag = sourceObj.map((source: any) => {\n                let attrs = '';\n                Object.keys(source).forEach((key) => {\n                    // Do not remove the first space as it is required to separate the attributes\n                    attrs += ` ${key}=\"${source[key]}\"`;\n                });\n                return `<source ${attrs}></source>`;\n            });\n        }\n        return `${sourceTag}${imgMarkup}`;\n    },\n\n    // Get src from responsive src\n    getResponsiveSrc(srcItms: string[]): string {\n        const rsWidth = [];\n        const rsSrc = [];\n        let src = '';\n        for (let i = 0; i < srcItms.length; i++) {\n            const _src = srcItms[i].split(' ');\n\n            // Manage empty space\n            if (_src[0] === '') {\n                _src.splice(0, 1);\n            }\n\n            rsSrc.push(_src[0]);\n            rsWidth.push(_src[1]);\n        }\n\n        const wWidth = window.innerWidth;\n        for (let j = 0; j < rsWidth.length; j++) {\n            if (parseInt(rsWidth[j], 10) > wWidth) {\n                src = rsSrc[j];\n                break;\n            }\n        }\n        return src;\n    },\n\n    isImageLoaded(img: HTMLImageElement): boolean {\n        if (!img) return false;\n        // During the onload event, IE correctly identifies any images that\n        // weren’t downloaded as not complete. Others should too. Gecko-based\n        // browsers act like NS4 in that they report this incorrectly.\n        if (!img.complete) {\n            return false;\n        }\n\n        // However, they do have two very useful properties: naturalWidth and\n        // naturalHeight. These give the true size of the image. If it failed\n        // to load, either of these should be zero.\n        if (img.naturalWidth === 0) {\n            return false;\n        }\n\n        // No other way of checking: assume it’s ok.\n        return true;\n    },\n\n    getVideoPosterMarkup(\n        _poster: string,\n        dummyImg: string,\n        videoContStyle: string,\n        _isVideo?: VideoInfo,\n    ): string {\n        let videoClass = '';\n        if (_isVideo && _isVideo.youtube) {\n            videoClass = 'lg-has-youtube';\n        } else if (_isVideo && _isVideo.vimeo) {\n            videoClass = 'lg-has-vimeo';\n        } else {\n            videoClass = 'lg-has-html5';\n        }\n\n        return `<div class=\"lg-video-cont ${videoClass}\" style=\"${videoContStyle}\">\n                <div class=\"lg-video-play-button\">\n                <svg\n                    viewBox=\"0 0 20 20\"\n                    preserveAspectRatio=\"xMidYMid\"\n                    focusable=\"false\"\n                    aria-labelledby=\"Play video\"\n                    role=\"img\"\n                    class=\"lg-video-play-icon\"\n                >\n                    <title>Play video</title>\n                    <polygon class=\"lg-video-play-icon-inner\" points=\"1,0 20,10 1,20\"></polygon>\n                </svg>\n                <svg class=\"lg-video-play-icon-bg\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle></svg>\n                <svg class=\"lg-video-play-icon-circle\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle>\n                </svg>\n            </div>\n            ${dummyImg || ''}\n            <img class=\"lg-object lg-video-poster\" src=\"${_poster}\" />\n        </div>`;\n    },\n\n    /**\n     * @desc Create dynamic elements array from gallery items when dynamic option is false\n     * It helps to avoid frequent DOM interaction\n     * and avoid multiple checks for dynamic elments\n     *\n     * @returns {Array} dynamicEl\n     */\n    getDynamicOptions(\n        items: any,\n        extraProps: string[],\n        getCaptionFromTitleOrAlt: boolean,\n        exThumbImage: string,\n    ): GalleryItem[] {\n        const dynamicElements: GalleryItem[] = [];\n        const availableDynamicOptions = [\n            ...defaultDynamicOptions,\n            ...extraProps,\n        ];\n        [].forEach.call(items, (item: HTMLElement) => {\n            const dynamicEl: GalleryItem = {} as GalleryItem;\n            for (let i = 0; i < item.attributes.length; i++) {\n                const attr = item.attributes[i];\n                if (attr.specified) {\n                    const dynamicAttr = convertToData(attr.name);\n                    let label = '';\n                    if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {\n                        label = dynamicAttr;\n                    }\n                    if (label) {\n                        (dynamicEl as any)[label] = attr.value;\n                    }\n                }\n            }\n            const currentItem = $LG(item);\n            const alt = currentItem.find('img').first().attr('alt');\n            const title = currentItem.attr('title');\n\n            const thumb = exThumbImage\n                ? currentItem.attr(exThumbImage)\n                : currentItem.find('img').first().attr('src');\n            dynamicEl.thumb = thumb;\n\n            if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {\n                dynamicEl.subHtml = title || alt || '';\n            }\n            dynamicEl.alt = alt || title || '';\n            dynamicElements.push(dynamicEl);\n        });\n        return dynamicElements;\n    },\n    isMobile(): boolean {\n        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    },\n};\n\nexport default utils;\n","import { GalleryItem } from './lg-utils';\nimport { LgQuery } from './lgQuery';\nimport { LightGallery } from './lightgallery';\nimport { AutoplaySettings } from './plugins/autoplay/lg-autoplay-settings';\nimport { CommentSettings } from './plugins/comment/lg-comment-settings';\nimport { FullscreenSettings } from './plugins/fullscreen/lg-fullscreen-settings';\nimport { HashSettings } from './plugins/hash/lg-hash-settings';\nimport { PagerSettings } from './plugins/pager/lg-pager-settings';\nimport { RotateSettings } from './plugins/rotate/lg-rotate-settings';\nimport { ShareSettings } from './plugins/share/lg-share-settings';\nimport { ThumbnailsSettings } from './plugins/thumbnail/lg-thumbnail-settings';\nimport { VideoSettings } from './plugins/video/lg-video-settings';\nimport { ZoomSettings } from './plugins/zoom/lg-zoom-settings';\n\ntype LightGalleryCoreMobileSettings = Exclude<\n    LightGalleryCoreSettings,\n    'mobileSettings'\n>;\n\n// @todo use separate mobile settings for plugins\nexport interface MobileSettings\n    extends LightGalleryCoreMobileSettings,\n        Partial<ZoomSettings>,\n        Partial<ThumbnailsSettings>,\n        Partial<VideoSettings>,\n        Partial<AutoplaySettings>,\n        Partial<CommentSettings>,\n        Partial<FullscreenSettings>,\n        Partial<HashSettings>,\n        Partial<PagerSettings>,\n        Partial<RotateSettings>,\n        Partial<ShareSettings> {}\n\nexport type LightGalleryAllSettings = LightGalleryCoreSettings &\n    ZoomSettings &\n    ThumbnailsSettings &\n    VideoSettings &\n    AutoplaySettings &\n    CommentSettings &\n    FullscreenSettings &\n    HashSettings &\n    PagerSettings &\n    RotateSettings &\n    ShareSettings;\n\nexport type LightGallerySettings = Partial<LightGalleryAllSettings>;\n\nexport interface LightGalleryCoreSettings {\n    /**\n     * Type of transition between images.\n     */\n    mode:\n        | 'lg-slide'\n        | 'lg-fade'\n        | 'lg-zoom-in'\n        | 'lg-zoom-in-big'\n        | 'lg-zoom-out'\n        | 'lg-zoom-out-big'\n        | 'lg-zoom-out-in'\n        | 'lg-zoom-in-out'\n        | 'lg-soft-zoom'\n        | 'lg-scale-up'\n        | 'lg-slide-circular'\n        | 'lg-slide-circular-vertical'\n        | 'lg-slide-vertical'\n        | 'lg-slide-vertical-growth'\n        | 'lg-slide-skew-only'\n        | 'lg-slide-skew-only-rev'\n        | 'lg-slide-skew-only-y'\n        | 'lg-slide-skew-only-y-rev'\n        | 'lg-slide-skew'\n        | 'lg-slide-skew-rev'\n        | 'lg-slide-skew-cross'\n        | 'lg-slide-skew-cross-rev'\n        | 'lg-slide-skew-ver'\n        | 'lg-slide-skew-ver-rev'\n        | 'lg-slide-skew-ver-cross'\n        | 'lg-slide-skew-ver-cross-rev'\n        | 'lg-lollipop'\n        | 'lg-lollipop-rev'\n        | 'lg-rotate'\n        | 'lg-rotate-rev'\n        | 'lg-tube';\n\n    /**\n     * Slide animation CSS easing property\n     */\n    easing: string;\n\n    /**\n     *Transition duration (in ms).\n     */\n    speed: number;\n\n    /**\n     * If you are using lightGallery for commercial projects, you need to purchase a commercial license\n     * to get the license key. For projects that are compatible with GPLv3 license,\n     * please contact us for getting a license key at <a href=\"mailto:contact@lightgalleryjs.com\">contact@lightgalleryjs.com</a>.\n     * If you want to test lightGallery before purchasing a commercial license, you can\n     * use `0000-0000-000-0000` as a temporary license key\n     */\n\n    licenseKey: string;\n\n    /**\n     * Height of the gallery.\n     * example '100%' , '300px'\n     */\n    height: string;\n\n    /**\n     * Width of the gallery.\n     * example '100%' , '300px'\n     */\n    width: string;\n\n    /**\n     * Add custom class for gallery container\n     * This can be used to set different style for different galleries\n     */\n    addClass: string;\n\n    /**\n     * Start animation class for the gallery.\n     * @description\n     * <ul>\n     * <li>This can be used to change the zoom effect when the image is loaded</li>\n     * <li>This is also applied when navigating to new slides</li>\n     * <li>startClass will be empty zoomFromOrigin is true.</li>\n     * </ul>\n     */\n    startClass: string;\n\n    /**\n     * Enable zoom from origin effect.\n     * @description You need to know the original image size upfront and provide it via data-lg-size attribute as <code> data-lg-size=\"1920-1280</code>\"\n     *\n     * If you don't know, the size of a few images in the list, you can skip the data-lg-size attribute for the particular slides,\n     * lightGallery will show the default animation if data-lg-size is not available\n     *\n     * If you are using responsive images,\n     * you can pass a comma separated list of sizes combined with a max-width (up to what size the particular image should be used)\n     *\n     * example -\n     * <code> data-lg-size=\"240-160-375, 400-267-480, 1600-1067\"\n     * data-responsive=\"img-240.jpg 375, img-400.jpg 480\"\n     * data-src=\"img-1600.jpg\" </code>\n     *\n     * In the above example, upto 375 width img.240.jpg and lg-size 240-160 will be used.\n     * Similarly, upto 480 pixel width size 400-267 and img-400.jpg will be used\n     * And above 480, lg-size 1600-1067 and img-1600.jpg will be used\n     *\n     * <ul>\n     * <li>At the moment, zoomFromOrigin options is supported only for image slides.</li>\n     * <li>Will be false if dynamic option is enabled or galleryID found in the URL.</li>\n     * <li>startClass will be empty if zoomFromOrigin is true to avoid css conflicts.</li>\n     * </ul>\n     */\n    zoomFromOrigin: boolean;\n\n    /**\n     * Zoom from image animation duration\n     */\n    startAnimationDuration: number;\n\n    /**\n     * Backdrop transition duration.\n     * Note - Do not change the value of backdrop via css.\n     */\n    backdropDuration: number;\n\n    /**\n     * Configure where the gallery should be appended.\n     * Useful to create inline galleries and more\n     */\n    container: HTMLElement;\n\n    /**\n     * Delay for hiding gallery controls in ms.\n     * Pass <code>0</code> if you don't want to hide the controls\n     */\n    hideBarsDelay: number;\n\n    /**\n     * Delay in hiding controls for the first time when gallery is opened\n     */\n    showBarsAfter: number;\n\n    /**\n     * Delay slide transitions.\n     * @description This is useful if you want to do any action in the current slide before moving to next slide.\n     * <section>\n     * For example, fading out the captions before going to next slide.\n     * <code>.lg-slide-progress</code> class name is added to the current slide immediately after calling the slide method.\n     * But transition begins only after the delay\n     * </section>\n     */\n    slideDelay: number;\n\n    /**\n     * Support legacy browsers\n     * @description Currently this is used only for adding support to srcset attribute via picturefill library\n     * If true lightGallery will show warning message to include picturefill library\n     */\n    supportLegacyBrowser: boolean;\n\n    /**\n     * If true, toolbar, captions and thumbnails will not overlap with media element\n     * This will not effect thumbnails if animateThumb is false\n     * Also, toggle thumbnails button is not displayed if allowMediaOverlap is false\n     * <section>\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\n     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.\n     * </section>\n     * <section>\n     * if you have dynamic captions for each media,\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\n     * </section>\n     */\n    allowMediaOverlap: boolean;\n\n    /**\n     * Video max size.\n     * @description This can be over-written by passing specific size via data-lg-size attribute\n     * Recommended video resolution and & aspect ratios <a href=\"https://support.google.com/youtube/answer/6375112\">https://support.google.com/youtube/answer/6375112</a>\n     */\n    videoMaxSize: string;\n\n    /**\n     * Height of the caption for calculating allowMediaOverlap positions\n     * Note - this is only used to find the position of media item if allowMediaOverlap is true.\n     * Not for setting height of the captions\n     * Set 0 if you want to calculate the height of captions dynamically\n     */\n    defaultCaptionHeight: number;\n\n    /**\n     * aria-labelledby attribute fot gallery\n     */\n    ariaLabelledby: string;\n\n    /**\n     * aria-describedby attribute for gallery\n     */\n    ariaDescribedby: string;\n\n    /**\n     * If false user won't be abel to close the gallery at all\n     * This is useful for creating inline galleries.\n     */\n    closable: boolean;\n\n    /**\n     * allows vertical drag/swipe to close gallery\n     * <code>false</code> if option <code>closable</code> is <code>false</code>\n     */\n    swipeToClose: boolean;\n    /**\n     * allows clicks on black area to close gallery.\n     */\n    closeOnTap: boolean;\n\n    /**\n     * If false, close button won't be displayed.\n     * Useful for creating inline galleries.\n     */\n    showCloseIcon: boolean;\n\n    /**\n     * Show maximize icon.\n     * Useful for creating inline galleries.\n     */\n    showMaximizeIcon: boolean;\n\n    /**\n     * If false, will disable the ability to loop back to the beginning of the gallery from the last slide.\n     */\n    loop: boolean;\n\n    /**\n     * Whether the LightGallery could be closed by pressing the \"Esc\" key.\n     */\n    escKey: boolean;\n\n    /**\n     * Enable keyboard navigation\n     */\n    keyPress: boolean;\n\n    /**\n     * If false, prev/next buttons will not be displayed.\n     */\n    controls: boolean;\n\n    /**\n     * Enable slideEnd animation\n     */\n    slideEndAnimation: boolean;\n\n    /**\n     * If true, prev/next button will be hidden on first/last image.\n     */\n    hideControlOnEnd: boolean;\n\n    /**\n     * ability to navigate to next/prev slides on mousewheel\n     */\n    mousewheel: boolean;\n\n    /**\n     * Option to get captions from alt or title tags.\n     */\n    getCaptionFromTitleOrAlt: boolean;\n\n    /**\n     * control where the sub-html should be appended.\n     */\n    appendSubHtmlTo: '.lg-sub-html' | '.lg-item';\n\n    /**\n     * Set to true if the selector in \"data-sub-html\" should use the current item as its origin.\n     */\n    subHtmlSelectorRelative: boolean;\n\n    /**\n     * number of preload slides\n     * @description will exicute only after the current slide is fully loaded.\n     * for example, if you click on 4th image and if preload = 1 then 3rd slide and 5th\n     * slide will be loaded in the background after the 4th slide is fully loaded..\n     * if preload is 2 then 2nd 3rd 5th 6th slides will be preloaded.\n     */\n    preload: number;\n\n    /**\n     * Control how many slide items should be kept in dom at a time\n     * @description To improve performance by reducing number of gallery items in the dom,\n     * lightGallery keeps only the lowest possible number of slides in the dom at a time.\n     * This has a minimum value of 3\n     */\n    numberOfSlideItemsInDom: number;\n\n    /**\n     * Show Content once it is fully loaded\n     */\n    showAfterLoad: boolean;\n\n    /**\n     * Custom selector property instead of direct children.\n     * @description Based on your markup structure, you can specify custom selectors to fetch media data for the gallery\n     * Pass \"this\" to select same element\n     * You can also pass HTMLCollection directly\n     * Example - '.my-selector' | '#my-selector' | this | document.querySelectorAll('.my-selector')\n     */\n    selector: string | HTMLCollection[];\n\n    /**\n     * By default selector element relative to the current gallery.\n     * Instead of that you can tell lightGallery to select element relative to another element.\n     * Example - '.my-selector-container' | '#my-selector-container'\n     * In the code this become selector =  document.querySelector(this.s.selectWithin ).querySelectorAll(this.s.selector);\n     */\n    selectWithin: string;\n\n    /**\n     * Custom html for next control\n     */\n    nextHtml: string;\n\n    /**\n     * Custom html for prev control\n     */\n    prevHtml: string;\n\n    /**\n     * specify which slide should load initially\n     */\n    index: number;\n\n    /**\n     * Set width for iframe.\n     */\n    iframeWidth: string;\n\n    /**\n     * Set width for iframe.\n     */\n    iframeHeight: string;\n\n    /**\n     * Enable download button.\n     * @description By default download url will be taken from data-src/href attribute but it supports only for modern browsers.\n     * If you want you can provide another url for download via data-download-url.\n     * pass false in data-download-url if you want to hide download button for the particular slide.\n     */\n    download: boolean;\n\n    /**\n     * Whether to show total number of images and index number of currently displayed image.\n     */\n    counter: boolean;\n\n    /**\n     * Where the counter should be appended\n     */\n    appendCounterTo: string;\n\n    /**\n     * By setting the swipeThreshold (in px) you can set how far the user must swipe for the next/prev image.\n     */\n    swipeThreshold: number;\n\n    /**\n     * Enables swipe support for touch devices\n     */\n    enableSwipe: boolean;\n\n    /**\n     * Enables desktop mouse drag support\n     */\n    enableDrag: boolean;\n\n    /**\n     * LightGallery can be instantiated and launched programmatically by setting this option to true and populating dynamicEl option (see below) with the definitions of images.\n     */\n    dynamic: boolean;\n\n    /**\n     * An array of objects (src, iframe, subHtml, thumb, poster, responsive, srcset sizes) representing gallery elements.\n     */\n    dynamicEl: GalleryItem[];\n\n    /**\n     * Fetch custom properties from the selector\n     * @description this is useful for plugin development\n     * By default lightGallery fetches and store all the props selectors to\n     * reduce frequent dom interaction for fetching props every time.\n     *\n     * If you need any addition data to be fetched and stored in the galleryItems variable,\n     * you can do this just by passing the prop names via extraProps\n     * @example\n     * HTML:\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-custom-prop=\"abc\"><img src=\"thumb.jpg\" /></a>\n     *     <a href=\"a.jpg\" data-custom-prop=\"xyz\"><img src=\"thumb.jpg\" /></a>\n     * </div>\n     * JS:\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     extraProps: ['customProp']\n     * })\n     * // Note - If you are using dynamic mode, you can pass any custom prop in the galleryItem\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     dynamic: true,\n     *     dynamicEl: [{\n     *         src: 'img/img1.jpg',\n     *         customProp:'abc',\n     *     }]\n     * })\n     *\n     */\n    extraProps: string[];\n\n    /**\n     * Option to fetch different thumbnail image other than first image\n     * @description If you want to use external image for thumbnail,\n     * add the path of that image inside \"data-\" attribute\n     * and set value of this option to the name of your custom attribute.\n     *\n     * @example\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-external-thumb-image=\"images/externalThumb.jpg\" ><img src=\"thumb.jpg\" /></a>\n     * </div>\n     *\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     exThumbImage: 'data-external-thumb-image'\n     * })\n     */\n    exThumbImage: string;\n\n    /**\n     * Function to detect mobile devices\n     */\n    isMobile?: () => boolean;\n\n    /**\n     * Separate settings for mobile devices\n     * @description Note - this is applied only at the time of loading\n     * by default controls and close buttons are disabled on mobile devices.\n     * use this options if you want to enable them or change any other settings for mobile devices\n     * Note - mobileSettings does not merge default values, You need to provide all mobileSettings including default values\n     */\n    mobileSettings: Partial<MobileSettings>;\n\n    plugins: (new (instance: LightGallery, $LG: LgQuery) => any)[];\n}\n\nexport const lightGalleryCoreSettings: LightGalleryCoreSettings = {\n    mode: 'lg-slide',\n    easing: 'ease',\n    speed: 400,\n    licenseKey: '0000-0000-000-0000',\n    height: '100%',\n    width: '100%',\n    addClass: '',\n    startClass: 'lg-start-zoom',\n    backdropDuration: 300,\n    container: document.body,\n    startAnimationDuration: 400,\n    zoomFromOrigin: true,\n    hideBarsDelay: 0,\n    showBarsAfter: 10000,\n    slideDelay: 0,\n    supportLegacyBrowser: true,\n    allowMediaOverlap: false,\n    videoMaxSize: '1280-720',\n    defaultCaptionHeight: 0,\n    ariaLabelledby: '',\n    ariaDescribedby: '',\n    closable: true,\n    swipeToClose: true,\n    closeOnTap: true,\n    showCloseIcon: true,\n    showMaximizeIcon: false,\n    loop: true,\n    escKey: true,\n    keyPress: true,\n    controls: true,\n    slideEndAnimation: true,\n    hideControlOnEnd: false,\n    mousewheel: false,\n    getCaptionFromTitleOrAlt: true,\n    appendSubHtmlTo: '.lg-sub-html',\n    subHtmlSelectorRelative: false,\n    preload: 2,\n    numberOfSlideItemsInDom: 10,\n    showAfterLoad: true,\n    selector: '',\n    selectWithin: '',\n    nextHtml: '',\n    prevHtml: '',\n    index: 0,\n    iframeWidth: '100%',\n    iframeHeight: '100%',\n    download: true,\n    counter: true,\n    appendCounterTo: '.lg-toolbar',\n    swipeThreshold: 50,\n    enableSwipe: true,\n    enableDrag: true,\n    dynamic: false,\n    dynamicEl: [],\n    extraProps: [],\n    exThumbImage: '',\n    isMobile: undefined,\n    mobileSettings: {\n        controls: false,\n        showCloseIcon: false,\n        download: false,\n    } as MobileSettings,\n    plugins: [],\n};\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n};\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * First time when an item is loaded lightGallery adds some delay for showing the completed item\n     * to show transition effect on item load\n     * Respect the delay when you use this event\n     */\n    delay: number;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n\n    /**\n     * True for first slide\n     */\n    isFirstSlide: boolean;\n}\n","import utils, { GalleryItem, ImageSize } from './lg-utils';\nimport { $LG, lgQuery } from './lgQuery';\nimport {\n    LightGallerySettings,\n    lightGalleryCoreSettings,\n    LightGalleryAllSettings,\n} from './lg-settings';\nimport {\n    Coords,\n    MediaContainerPosition,\n    SlideDirection,\n    VideoInfo,\n} from './types';\nimport {\n    AfterAppendSlideEventDetail,\n    AfterAppendSubHtmlDetail,\n    BeforeSlideDetail,\n    lGEvents,\n    SlideItemLoadDetail,\n} from './lg-events';\n\ndeclare let picturefill: any;\n\n// @ref - https://stackoverflow.com/questions/3971841/how-to-resize-images-proportionally-keeping-the-aspect-ratio\n// @ref - https://2ality.com/2017/04/setting-up-multi-platform-packages.html\n\n// Unique id for each gallery\nlet lgId = 0;\n\nexport class LightGallery {\n    public settings!: LightGalleryAllSettings;\n    public galleryItems!: GalleryItem[];\n\n    // Current gallery item\n    public lgId!: number;\n\n    public el!: HTMLElement;\n    public LGel!: lgQuery;\n    public lgOpened = false;\n\n    public index = 0;\n\n    // lightGallery modules\n    public plugins: any[] = [];\n\n    // false when lightGallery load first slide content;\n    public lGalleryOn = false;\n\n    // True when a slide animation is in progress\n    public lgBusy = false;\n\n    // Type of touch action - {swipe, zoomSwipe, pinch}\n    public touchAction?: 'swipe' | 'zoomSwipe' | 'pinch';\n\n    // Direction of swipe/drag - {horizontal, vertical}\n    public swipeDirection?: 'horizontal' | 'vertical';\n\n    // Timeout function for hiding controls;\n    public hideBarTimeout: any;\n\n    public currentItemsInDom: string[] = [];\n\n    public outer!: lgQuery;\n\n    public items: any;\n\n    public $backdrop!: lgQuery;\n    public $lgContent!: lgQuery;\n    public $lgComponents!: lgQuery;\n\n    public $container!: lgQuery;\n\n    public $inner!: lgQuery;\n    public $toolbar!: lgQuery;\n\n    // Scroll top value before lightGallery is opened\n    public prevScrollTop = 0;\n\n    private zoomFromOrigin!: boolean;\n\n    private currentImageSize?: ImageSize;\n\n    private isDummyImageRemoved = false;\n\n    private mediaContainerPosition = {\n        top: 0,\n        bottom: 0,\n    };\n\n    constructor(element: HTMLElement, options?: LightGallerySettings) {\n        if (!element) {\n            return this;\n        }\n        lgId++;\n        this.lgId = lgId;\n\n        this.el = element;\n        this.LGel = $LG(element);\n\n        this.generateSettings(options);\n\n        this.buildModules();\n\n        // When using dynamic mode, ensure dynamicEl is an array\n        if (\n            this.settings.dynamic &&\n            this.settings.dynamicEl !== undefined &&\n            !Array.isArray(this.settings.dynamicEl)\n        ) {\n            throw 'When using dynamic mode, you must also define dynamicEl as an Array.';\n        }\n\n        this.galleryItems = this.getItems();\n        this.normalizeSettings();\n\n        // Gallery items\n\n        this.init();\n\n        this.validateLicense();\n\n        return this;\n    }\n\n    private generateSettings(options?: LightGallerySettings) {\n        // lightGallery settings\n        this.settings = {\n            ...lightGalleryCoreSettings,\n            ...options,\n        } as LightGalleryAllSettings;\n        if (\n            this.settings.isMobile &&\n            typeof this.settings.isMobile === 'function'\n                ? this.settings.isMobile()\n                : utils.isMobile()\n        ) {\n            const mobileSettings = {\n                ...this.settings.mobileSettings,\n                ...this.settings.mobileSettings,\n            };\n            this.settings = { ...this.settings, ...mobileSettings };\n        }\n    }\n\n    private normalizeSettings() {\n        if (this.settings.slideEndAnimation) {\n            this.settings.hideControlOnEnd = false;\n        }\n        if (!this.settings.closable) {\n            this.settings.swipeToClose = false;\n        }\n\n        // And reset it on close to get the correct value next time\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n\n        // At the moment, Zoom from image doesn't support dynamic options\n        // @todo add zoomFromOrigin support for dynamic images\n        if (this.settings.dynamic) {\n            this.zoomFromOrigin = false;\n        }\n\n        if (!this.settings.container) {\n            this.settings.container = document.body;\n        }\n\n        // settings.preload should not be grater than $item.length\n        this.settings.preload = Math.min(\n            this.settings.preload,\n            this.galleryItems.length,\n        );\n    }\n\n    init(): void {\n        this.addSlideVideoInfo(this.galleryItems);\n\n        this.buildStructure();\n\n        this.LGel.trigger(lGEvents.init, {\n            instance: this,\n        });\n\n        if (this.settings.keyPress) {\n            this.keyPress();\n        }\n\n        setTimeout(() => {\n            this.enableDrag();\n            this.enableSwipe();\n        }, 50);\n\n        this.arrow();\n        if (this.settings.mousewheel) {\n            this.mousewheel();\n        }\n\n        if (!this.settings.dynamic) {\n            this.openGalleryOnItemClick();\n        }\n    }\n\n    openGalleryOnItemClick(): void {\n        // Using for loop instead of using bubbling as the items can be any html element.\n        for (let index = 0; index < this.items.length; index++) {\n            const element = this.items[index];\n            const $element = $LG(element);\n            // Using different namespace for click because click event should not unbind if selector is same object('this')\n            // @todo manage all event listners - should have namespace that represent element\n            const uuid = lgQuery.generateUUID();\n            $element\n                .attr('data-lg-id', uuid)\n                .on(`click.lgcustom-item-${uuid}`, (e) => {\n                    e.preventDefault();\n                    const currentItemIndex = this.settings.index || index;\n                    this.openGallery(currentItemIndex, element);\n                });\n        }\n    }\n\n    /**\n     * Module constructor\n     * Modules are build incrementally.\n     * Gallery should be opened only once all the modules are initialized.\n     * use moduleBuildTimeout to make sure this\n     */\n    buildModules(): void {\n        this.settings.plugins.forEach((plugin) => {\n            this.plugins.push(new plugin(this, $LG));\n        });\n    }\n\n    validateLicense(): void {\n        if (!this.settings.licenseKey) {\n            console.error('Please provide a valid license key');\n        } else if (this.settings.licenseKey === '0000-0000-000-0000') {\n            console.warn(\n                `lightGallery: ${this.settings.licenseKey} license key is not valid for production use`,\n            );\n        }\n    }\n\n    getSlideItem(index: number): lgQuery {\n        return $LG(this.getSlideItemId(index));\n    }\n\n    getSlideItemId(index: number): string {\n        return `#lg-item-${this.lgId}-${index}`;\n    }\n\n    getIdName(id: string): string {\n        return `${id}-${this.lgId}`;\n    }\n    getElementById(id: string): lgQuery {\n        return $LG(`#${this.getIdName(id)}`);\n    }\n\n    manageSingleSlideClassName(): void {\n        if (this.galleryItems.length < 2) {\n            this.outer.addClass('lg-single-item');\n        } else {\n            this.outer.removeClass('lg-single-item');\n        }\n    }\n\n    buildStructure(): void {\n        const container = this.$container && this.$container.get();\n        if (container) {\n            return;\n        }\n        let controls = '';\n        let subHtmlCont = '';\n\n        // Create controls\n        if (this.settings.controls) {\n            controls = `<button type=\"button\" id=\"${this.getIdName(\n                'lg-prev',\n            )}\" aria-label=\"Previous slide\" class=\"lg-prev lg-icon\"> ${\n                this.settings.prevHtml\n            } </button>\n                <button type=\"button\" id=\"${this.getIdName(\n                    'lg-next',\n                )}\" aria-label=\"Next slide\" class=\"lg-next lg-icon\"> ${\n                this.settings.nextHtml\n            } </button>`;\n        }\n\n        if (this.settings.appendSubHtmlTo === '.lg-sub-html') {\n            subHtmlCont =\n                '<div class=\"lg-sub-html\" role=\"status\" aria-live=\"polite\"></div>';\n        }\n\n        let addClasses = '';\n\n        if (this.settings.allowMediaOverlap) {\n            // Do not remove space before last single quote\n            addClasses += 'lg-media-overlap ';\n        }\n\n        const ariaLabelledby = this.settings.ariaLabelledby\n            ? 'aria-labelledby=\"' + this.settings.ariaLabelledby + '\"'\n            : '';\n        const ariaDescribedby = this.settings.ariaDescribedby\n            ? 'aria-describedby=\"' + this.settings.ariaDescribedby + '\"'\n            : '';\n\n        const containerClassName = `lg-container ${this.settings.addClass} ${\n            document.body !== this.settings.container ? 'lg-inline' : ''\n        }`;\n        const closeIcon =\n            this.settings.closable && this.settings.showCloseIcon\n                ? `<button type=\"button\" aria-label=\"Close gallery\" id=\"${this.getIdName(\n                      'lg-close',\n                  )}\" class=\"lg-close lg-icon\"></button>`\n                : '';\n        const maximizeIcon = this.settings.showMaximizeIcon\n            ? `<button type=\"button\" aria-label=\"Toggle maximize\" id=\"${this.getIdName(\n                  'lg-maximize',\n              )}\" class=\"lg-maximize lg-icon\"></button>`\n            : '';\n        const template = `\n        <div class=\"${containerClassName}\" id=\"${this.getIdName(\n            'lg-container',\n        )}\" tabindex=\"-1\" aria-modal=\"true\" ${ariaLabelledby} ${ariaDescribedby} role=\"dialog\"\n        >\n            <div id=\"${this.getIdName(\n                'lg-backdrop',\n            )}\" class=\"lg-backdrop\"></div>\n\n            <div id=\"${this.getIdName(\n                'lg-outer',\n            )}\" class=\"lg-outer lg-use-css3 lg-css3 lg-hide-items ${addClasses} \">\n                    <div id=\"${this.getIdName(\n                        'lg-content',\n                    )}\" class=\"lg\" style=\"width: ${\n            this.settings.width\n        }; height:${this.settings.height}\">\n                        <div id=\"${this.getIdName(\n                            'lg-inner',\n                        )}\" class=\"lg-inner\"></div>\n                        <div id=\"${this.getIdName(\n                            'lg-toolbar',\n                        )}\" class=\"lg-toolbar lg-group\">\n                        ${maximizeIcon}\n                        ${closeIcon}\n                    </div>\n                    ${controls}\n                    <div id=\"${this.getIdName(\n                        'lg-components',\n                    )}\" class=\"lg-components\">\n                        ${subHtmlCont}\n                    </div>\n                </div> \n            </div>\n        </div>\n        `;\n\n        $LG(this.settings.container)\n            .css('position', 'relative')\n            .append(template);\n        this.outer = this.getElementById('lg-outer');\n        this.$lgContent = this.getElementById('lg-content');\n        this.$lgComponents = this.getElementById('lg-components');\n        this.$backdrop = this.getElementById('lg-backdrop');\n        this.$container = this.getElementById('lg-container');\n        this.$inner = this.getElementById('lg-inner');\n        this.$toolbar = this.getElementById('lg-toolbar');\n\n        this.$backdrop.css(\n            'transition-duration',\n            this.settings.backdropDuration + 'ms',\n        );\n\n        let outerClassNames = `${this.settings.mode} `;\n\n        this.manageSingleSlideClassName();\n\n        if (this.settings.enableDrag) {\n            outerClassNames += 'lg-grab ';\n        }\n\n        if (this.settings.showAfterLoad) {\n            outerClassNames += 'lg-show-after-load';\n        }\n\n        this.outer.addClass(outerClassNames);\n\n        this.$inner.css('transition-timing-function', this.settings.easing);\n        this.$inner.css('transition-duration', this.settings.speed + 'ms');\n\n        if (this.settings.download) {\n            this.$toolbar.append(\n                `<a id=\"${this.getIdName(\n                    'lg-download',\n                )}\" target=\"_blank\" aria-label=\"Download\" download class=\"lg-download lg-icon\"></a>`,\n            );\n        }\n\n        this.counter();\n\n        $LG(window).on(\n            `resize.lg.global${this.lgId} orientationchange.lg.global${this.lgId}`,\n            () => {\n                this.refreshOnResize();\n            },\n        );\n\n        this.hideBars();\n\n        this.manageCloseGallery();\n        this.toggleMaximize();\n\n        this.initModules();\n    }\n\n    refreshOnResize(): void {\n        if (this.lgOpened) {\n            const currentGalleryItem = this.galleryItems[this.index];\n            const videoInfo = currentGalleryItem.__slideVideoInfo;\n\n            const { top, bottom } = this.getMediaContainerPosition();\n            this.currentImageSize = utils.getSize(\n                this.items[this.index],\n                this.$lgContent,\n                top + bottom,\n                videoInfo && this.settings.videoMaxSize,\n            );\n            if (videoInfo) {\n                this.resizeVideoSlide(this.index, this.currentImageSize);\n            }\n            if (this.zoomFromOrigin && !this.isDummyImageRemoved) {\n                const imgStyle = this.getDummyImgStyles(this.currentImageSize);\n                this.outer\n                    .find('.lg-current .lg-dummy-img')\n                    .first()\n                    .attr('style', imgStyle);\n            }\n            this.LGel.trigger(lGEvents.containerResize);\n        }\n    }\n\n    resizeVideoSlide(index: number, imageSize?: ImageSize): void {\n        const lgVideoStyle = this.getVideoContStyle(imageSize);\n        const currentSlide = this.getSlideItem(index);\n        currentSlide.find('.lg-video-cont').attr('style', lgVideoStyle);\n    }\n\n    /**\n     * Update slides dynamically.\n     * Add, edit or delete slides dynamically when lightGallery is opened.\n     * Modify the current gallery items and pass it via updateSlides method\n     * @note\n     * - Do not mutate existing lightGallery items directly.\n     * - Always pass new list of gallery items\n     * - You need to take care of thumbnails outside the gallery if any\n     * @param items Gallery items\n     * @param index After the update operation, which slide gallery should navigate to\n     * @category lGPublicMethods\n     * @example\n     * const plugin = lightGallery();\n     *\n     * // Adding slides dynamically\n     * let galleryItems = [\n     * // Access existing lightGallery items\n     * // galleryItems are automatically generated internally from the gallery HTML markup\n     * // or directly from galleryItems when dynamic gallery is used\n     *   ...plugin.galleryItems,\n     *     ...[\n     *       {\n     *         src: 'img/img-1.png',\n     *           thumb: 'img/thumb1.png',\n     *         },\n     *     ],\n     *   ];\n     *   plugin.updateSlides(\n     *     galleryItems,\n     *     plugin.index,\n     *   );\n     *\n     *\n     * // Remove slides dynamically\n     * galleryItems = JSON.parse(\n     *   JSON.stringify(updateSlideInstance.galleryItems),\n     * );\n     * galleryItems.shift();\n     * updateSlideInstance.updateSlides(galleryItems, 1);\n     * @see <a href=\"/demos/update-slides/\">Demo</a>\n     */\n    updateSlides(items: GalleryItem[], index: number): void {\n        if (this.index > items.length - 1) {\n            this.index = items.length - 1;\n        }\n        if (items.length === 1) {\n            this.index = 0;\n        }\n        if (!items.length) {\n            this.closeGallery();\n            return;\n        }\n        const currentSrc = this.galleryItems[index].src;\n        this.galleryItems = items;\n        this.updateControls();\n        this.$inner.empty();\n        this.currentItemsInDom = [];\n\n        let _index = 0;\n        // Find the current index based on source value of the slide\n        this.galleryItems.some((galleryItem, itemIndex) => {\n            if (galleryItem.src === currentSrc) {\n                _index = itemIndex;\n                return true;\n            }\n            return false;\n        });\n\n        this.currentItemsInDom = this.organizeSlideItems(_index, -1);\n        this.loadContent(_index, true);\n        this.getSlideItem(_index).addClass('lg-current');\n\n        this.index = _index;\n        this.updateCurrentCounter(_index);\n        this.LGel.trigger(lGEvents.updateSlides);\n    }\n\n    // Get gallery items based on multiple conditions\n    getItems(): GalleryItem[] {\n        // Gallery items\n        this.items = [];\n        if (!this.settings.dynamic) {\n            if (this.settings.selector === 'this') {\n                this.items.push(this.el);\n            } else if (this.settings.selector) {\n                if (typeof this.settings.selector === 'string') {\n                    if (this.settings.selectWithin) {\n                        const selectWithin = $LG(this.settings.selectWithin);\n                        this.items = selectWithin\n                            .find(this.settings.selector)\n                            .get();\n                    } else {\n                        this.items = this.el.querySelectorAll(\n                            this.settings.selector,\n                        );\n                    }\n                } else {\n                    this.items = this.settings.selector;\n                }\n            } else {\n                this.items = this.el.children;\n            }\n            return utils.getDynamicOptions(\n                this.items,\n                this.settings.extraProps,\n                this.settings.getCaptionFromTitleOrAlt,\n                this.settings.exThumbImage,\n            );\n        } else {\n            return this.settings.dynamicEl || [];\n        }\n    }\n\n    /**\n     * Open lightGallery.\n     * Open gallery with specific slide by passing index of the slide as parameter.\n     * @category lGPublicMethods\n     * @param {Number} index  - index of the slide\n     * @param {HTMLElement} element - Which image lightGallery should zoom from\n     *\n     * @example\n     * const $dynamicGallery = document.getElementById('dynamic-gallery-demo');\n     * const dynamicGallery = lightGallery($dynamicGallery, {\n     *     dynamic: true,\n     *     dynamicEl: [\n     *         {\n     *              src: 'img/1.jpg',\n     *              thumb: 'img/thumb-1.jpg',\n     *              subHtml: '<h4>Image 1 title</h4><p>Image 1 descriptions.</p>',\n     *         },\n     *         ...\n     *     ],\n     * });\n     * $dynamicGallery.addEventListener('click', function () {\n     *     // Starts with third item.(Optional).\n     *     // This is useful if you want use dynamic mode with\n     *     // custom thumbnails (thumbnails outside gallery),\n     *     dynamicGallery.openGallery(2);\n     * });\n     *\n     */\n    openGallery(index = this.settings.index, element?: HTMLElement): void {\n        // prevent accidental double execution\n        if (this.lgOpened) return;\n        this.lgOpened = true;\n        this.outer.get().focus();\n        this.outer.removeClass('lg-hide-items');\n\n        // Add display block, but still has opacity 0\n        this.$container.addClass('lg-show');\n\n        const itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(\n            index,\n            index,\n        );\n        this.currentItemsInDom = itemsToBeInsertedToDom;\n\n        let items = '';\n        itemsToBeInsertedToDom.forEach((item) => {\n            items = items + `<div id=\"${item}\" class=\"lg-item\"></div>`;\n        });\n\n        this.$inner.append(items);\n        this.addHtml(index);\n        let transform: string | undefined = '';\n        this.mediaContainerPosition = this.getMediaContainerPosition();\n        const { top, bottom } = this.mediaContainerPosition;\n        if (!this.settings.allowMediaOverlap) {\n            this.setMediaContainerPosition(top, bottom);\n        }\n        if (this.zoomFromOrigin && element) {\n            this.currentImageSize = utils.getSize(\n                element,\n                this.$lgContent,\n                top + bottom,\n                this.galleryItems[index].__slideVideoInfo &&\n                    this.settings.videoMaxSize,\n            );\n            transform = utils.getTransform(\n                element,\n                this.$lgContent,\n                top,\n                bottom,\n                this.currentImageSize,\n            );\n        }\n        if (!this.zoomFromOrigin || !transform) {\n            this.outer.addClass(this.settings.startClass);\n            this.getSlideItem(index).removeClass('lg-complete');\n        }\n        const timeout = this.settings.zoomFromOrigin\n            ? 100\n            : this.settings.backdropDuration;\n        setTimeout(() => {\n            this.outer.addClass('lg-components-open');\n        }, timeout);\n        this.index = index;\n        this.LGel.trigger(lGEvents.beforeOpen);\n\n        // add class lg-current to remove initial transition\n        this.getSlideItem(index).addClass('lg-current');\n\n        this.lGalleryOn = false;\n        // Store the current scroll top value to scroll back after closing the gallery..\n        this.prevScrollTop = $LG(window).scrollTop();\n\n        setTimeout(() => {\n            // Need to check both zoomFromOrigin and transform values as we need to set set the\n            // default opening animation if user missed to add the lg-size attribute\n\n            if (this.zoomFromOrigin && transform) {\n                const currentSlide = this.getSlideItem(index);\n                currentSlide.css('transform', transform);\n                setTimeout(() => {\n                    currentSlide\n                        .addClass('lg-start-progress lg-start-end-progress')\n                        .css(\n                            'transition-duration',\n                            this.settings.startAnimationDuration + 'ms',\n                        );\n                    this.outer.addClass('lg-zoom-from-image');\n                });\n                setTimeout(() => {\n                    currentSlide.css('transform', 'translate3d(0, 0, 0)');\n                }, 100);\n            }\n\n            setTimeout(() => {\n                this.$backdrop.addClass('in');\n                this.$container.addClass('lg-show-in');\n            }, 10);\n\n            // lg-visible class resets gallery opacity to 1\n            if (!this.zoomFromOrigin || !transform) {\n                setTimeout(() => {\n                    this.outer.addClass('lg-visible');\n                }, this.settings.backdropDuration);\n            }\n\n            // initiate slide function\n            this.slide(index, false, false, false);\n\n            this.LGel.trigger(lGEvents.afterOpen);\n        });\n\n        if (document.body === this.settings.container) {\n            $LG('html').addClass('lg-on');\n        }\n    }\n\n    /**\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\n     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.\n     * if you have dynamic captions for each media,\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\n     */\n    public getMediaContainerPosition(): MediaContainerPosition {\n        if (this.settings.allowMediaOverlap) {\n            return {\n                top: 0,\n                bottom: 0,\n            };\n        }\n        const top = this.$toolbar.get().clientHeight || 0;\n        const captionHeight =\n            this.settings.defaultCaptionHeight ||\n            this.outer.find('.lg-sub-html').get().clientHeight;\n        const thumbContainer = this.outer.find('.lg-thumb-outer').get();\n        const thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;\n        const bottom = thumbHeight + captionHeight;\n        return {\n            top,\n            bottom,\n        };\n    }\n\n    private setMediaContainerPosition(top = 0, bottom = 0): void {\n        this.$inner.css('top', top + 'px').css('bottom', bottom + 'px');\n    }\n\n    hideBars(): void {\n        // Hide controllers if mouse doesn't move for some period\n        setTimeout(() => {\n            this.outer.removeClass('lg-hide-items');\n            if (this.settings.hideBarsDelay > 0) {\n                this.outer.on('mousemove.lg click.lg touchstart.lg', () => {\n                    this.outer.removeClass('lg-hide-items');\n\n                    clearTimeout(this.hideBarTimeout);\n\n                    // Timeout will be cleared on each slide movement also\n                    this.hideBarTimeout = setTimeout(() => {\n                        this.outer.addClass('lg-hide-items');\n                    }, this.settings.hideBarsDelay);\n                });\n                this.outer.trigger('mousemove.lg');\n            }\n        }, this.settings.showBarsAfter);\n    }\n\n    initPictureFill($img: lgQuery): void {\n        if (this.settings.supportLegacyBrowser) {\n            try {\n                picturefill({\n                    elements: [$img.get()],\n                });\n            } catch (e) {\n                console.warn(\n                    'lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.',\n                );\n            }\n        }\n    }\n\n    /**\n     *  @desc Create image counter\n     *  Ex: 1/10\n     */\n    counter(): void {\n        if (this.settings.counter) {\n            const counterHtml = `<div class=\"lg-counter\" role=\"status\" aria-live=\"polite\">\n                <span id=\"${this.getIdName(\n                    'lg-counter-current',\n                )}\" class=\"lg-counter-current\">${this.index + 1} </span> / \n                <span id=\"${this.getIdName(\n                    'lg-counter-all',\n                )}\" class=\"lg-counter-all\">${\n                this.galleryItems.length\n            } </span></div>`;\n            this.outer.find(this.settings.appendCounterTo).append(counterHtml);\n        }\n    }\n\n    /**\n     *  @desc add sub-html into the slide\n     *  @param {Number} index - index of the slide\n     */\n    addHtml(index: number): void {\n        let subHtml;\n        let subHtmlUrl;\n        if (this.galleryItems[index].subHtmlUrl) {\n            subHtmlUrl = this.galleryItems[index].subHtmlUrl;\n        } else {\n            subHtml = this.galleryItems[index].subHtml;\n        }\n\n        if (!subHtmlUrl) {\n            if (subHtml) {\n                // get first letter of sub-html\n                // if first letter starts with . or # get the html form the jQuery object\n                const fL = subHtml.substring(0, 1);\n                if (fL === '.' || fL === '#') {\n                    if (\n                        this.settings.subHtmlSelectorRelative &&\n                        !this.settings.dynamic\n                    ) {\n                        subHtml = $LG(this.items)\n                            .eq(index)\n                            .find(subHtml)\n                            .first()\n                            .html();\n                    } else {\n                        subHtml = $LG(subHtml).first().html();\n                    }\n                }\n            } else {\n                subHtml = '';\n            }\n        }\n\n        if (this.settings.appendSubHtmlTo === '.lg-sub-html') {\n            if (subHtmlUrl) {\n                this.outer.find('.lg-sub-html').load(subHtmlUrl);\n            } else {\n                this.outer.find('.lg-sub-html').html(subHtml as string);\n            }\n        } else {\n            const currentSlide = $LG(this.getSlideItemId(index));\n            if (subHtmlUrl) {\n                currentSlide.load(subHtmlUrl);\n            } else {\n                currentSlide.append(\n                    `<div class=\"lg-sub-html\">${subHtml}</div>`,\n                );\n            }\n        }\n\n        // Add lg-empty-html class if title doesn't exist\n        if (typeof subHtml !== 'undefined' && subHtml !== null) {\n            if (subHtml === '') {\n                this.outer\n                    .find(this.settings.appendSubHtmlTo)\n                    .addClass('lg-empty-html');\n            } else {\n                this.outer\n                    .find(this.settings.appendSubHtmlTo)\n                    .removeClass('lg-empty-html');\n            }\n        }\n\n        this.LGel.trigger<AfterAppendSubHtmlDetail>(\n            lGEvents.afterAppendSubHtml,\n            {\n                index,\n            },\n        );\n    }\n\n    /**\n     *  @desc Preload slides\n     *  @param {Number} index - index of the slide\n     * @todo preload not working for the first slide, Also, should work for the first and last slide as well\n     */\n    preload(index: number): void {\n        for (let i = 1; i <= this.settings.preload; i++) {\n            if (i >= this.galleryItems.length - index) {\n                break;\n            }\n\n            this.loadContent(index + i, false);\n        }\n\n        for (let j = 1; j <= this.settings.preload; j++) {\n            if (index - j < 0) {\n                break;\n            }\n\n            this.loadContent(index - j, false);\n        }\n    }\n\n    getDummyImgStyles(imageSize?: ImageSize): string {\n        if (!imageSize) return '';\n        return `width:${imageSize.width}px; \n                margin-left: -${imageSize.width / 2}px;\n                margin-top: -${imageSize.height / 2}px; \n                height:${imageSize.height}px`;\n    }\n    getVideoContStyle(imageSize?: ImageSize): string {\n        if (!imageSize) return '';\n        return `width:${imageSize.width}px; \n                height:${imageSize.height}px`;\n    }\n\n    getDummyImageContent(\n        $currentSlide: lgQuery,\n        index: number,\n        alt: string,\n    ): string {\n        let $currentItem;\n        if (!this.settings.dynamic) {\n            $currentItem = $LG(this.items).eq(index);\n        }\n        if ($currentItem) {\n            let _dummyImgSrc;\n            if (!this.settings.exThumbImage) {\n                _dummyImgSrc = $currentItem.find('img').first().attr('src');\n            } else {\n                _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);\n            }\n            if (!_dummyImgSrc) return '';\n            const imgStyle = this.getDummyImgStyles(this.currentImageSize);\n            const dummyImgContent = `<img ${alt} style=\"${imgStyle}\" class=\"lg-dummy-img\" src=\"${_dummyImgSrc}\" />`;\n\n            $currentSlide.addClass('lg-first-slide');\n            this.outer.addClass('lg-first-slide-loading');\n\n            return dummyImgContent;\n        }\n        return '';\n    }\n\n    setImgMarkup(src: string, $currentSlide: lgQuery, index: number): void {\n        const currentGalleryItem = this.galleryItems[index];\n        const { alt, srcset, sizes, sources } = currentGalleryItem;\n\n        // Use the thumbnail as dummy image which will be resized to actual image size and\n        // displayed on top of actual image\n        let imgContent = '';\n        const altAttr = alt ? 'alt=\"' + alt + '\"' : '';\n\n        if (!this.lGalleryOn && this.zoomFromOrigin && this.currentImageSize) {\n            imgContent = this.getDummyImageContent(\n                $currentSlide,\n                index,\n                altAttr,\n            );\n        } else {\n            imgContent = utils.getImgMarkup(\n                index,\n                src,\n                altAttr,\n                srcset,\n                sizes,\n                sources,\n            );\n        }\n        const imgMarkup = `<picture class=\"lg-img-wrap\"> ${imgContent}</picture>`;\n        $currentSlide.prepend(imgMarkup);\n    }\n\n    onLgObjectLoad(\n        $el: lgQuery,\n        index: number,\n        delay: number,\n        speed: number,\n        dummyImageLoaded: boolean,\n    ): void {\n        if (dummyImageLoaded) {\n            this.LGel.trigger<SlideItemLoadDetail>(lGEvents.slideItemLoad, {\n                index,\n                delay: delay || 0,\n            });\n        }\n        $el.find('.lg-object')\n            .first()\n            .on('load.lg', () => {\n                this.handleLgObjectLoad(\n                    $el,\n                    index,\n                    delay,\n                    speed,\n                    dummyImageLoaded,\n                );\n            });\n        setTimeout(() => {\n            $el.find('.lg-object')\n                .first()\n                .on('error.lg', () => {\n                    $el.addClass('lg-complete lg-complete_');\n                    $el.html(\n                        '<span class=\"lg-error-msg\">Oops... Failed to load content...</span>',\n                    );\n                });\n        }, speed);\n    }\n    handleLgObjectLoad(\n        $el: lgQuery,\n        index: number,\n        delay: number,\n        speed: number,\n        dummyImageLoaded: boolean,\n    ): void {\n        setTimeout(() => {\n            $el.addClass('lg-complete lg-complete_');\n            if (!dummyImageLoaded) {\n                this.LGel.trigger<SlideItemLoadDetail>(lGEvents.slideItemLoad, {\n                    index,\n                    delay: delay || 0,\n                });\n            }\n        }, speed);\n    }\n\n    /**\n     * @desc Check the given src is video\n     * @param {String} src\n     * @return {Object} video type\n     * Ex:{ youtube  :  [\"//www.youtube.com/watch?v=c0asJgSyxcY\", \"c0asJgSyxcY\"] }\n     *\n     * @todo - this information can be moved to dynamicEl to avoid frequent calls\n     */\n    isVideo(src: string, index: number): VideoInfo | undefined {\n        if (!src) {\n            if (this.galleryItems[index].video) {\n                return {\n                    html5: true,\n                };\n            } else {\n                console.error(\n                    'lightGallery :- data-src is not provided on slide item ' +\n                        (index + 1) +\n                        '. Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/',\n                );\n                return;\n            }\n        }\n\n        const youtube = src.match(\n            /\\/\\/(?:www\\.)?youtu(?:\\.be|be\\.com|be-nocookie\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-\\_\\%]+)/i,\n        );\n        const vimeo = src.match(\n            /\\/\\/(?:www\\.)?(?:player\\.)?vimeo.com\\/(?:video\\/)?([0-9a-z\\-_]+)/i,\n        );\n        const wistia = src.match(\n            /https?:\\/\\/(.+)?(wistia\\.com|wi\\.st)\\/(medias|embed)\\/([0-9a-z\\-_]+)(.*)/,\n        );\n\n        if (youtube) {\n            return {\n                youtube,\n            };\n        } else if (vimeo) {\n            return {\n                vimeo,\n            };\n        } else if (wistia) {\n            return {\n                wistia,\n            };\n        }\n    }\n\n    // Add video slideInfo\n    addSlideVideoInfo(items: GalleryItem[]): void {\n        items.forEach((element, index) => {\n            element.__slideVideoInfo = this.isVideo(element.src, index);\n        });\n    }\n\n    /**\n     *  Load slide content into slide.\n     *  This is used to load content into slides that is not visible too\n     *  @param {Number} index - index of the slide.\n     *  @param {Boolean} rec - if true call loadcontent() function again.\n     */\n    loadContent(index: number, rec: boolean): void {\n        const currentGalleryItem = this.galleryItems[index];\n        const $currentSlide = $LG(this.getSlideItemId(index));\n\n        const { poster, srcset, sizes, sources } = currentGalleryItem;\n        let { src } = currentGalleryItem;\n\n        const video = currentGalleryItem.video;\n\n        const _html5Video =\n            video && typeof video === 'string' ? JSON.parse(video) : video;\n\n        if (currentGalleryItem.responsive) {\n            const srcDyItms = currentGalleryItem.responsive.split(',');\n            src = utils.getResponsiveSrc(srcDyItms) || src;\n        }\n\n        const videoInfo = currentGalleryItem.__slideVideoInfo;\n        let lgVideoStyle = '';\n\n        const iframe = !!currentGalleryItem.iframe;\n\n        if (!$currentSlide.hasClass('lg-loaded')) {\n            if (videoInfo) {\n                const { top, bottom } = this.mediaContainerPosition;\n                const videoSize = utils.getSize(\n                    this.items[index],\n                    this.$lgContent,\n                    top + bottom,\n                    videoInfo && this.settings.videoMaxSize,\n                );\n                lgVideoStyle = this.getVideoContStyle(videoSize);\n            }\n            if (iframe) {\n                const markup = utils.getIframeMarkup(\n                    src,\n                    this.settings.iframeWidth,\n                    this.settings.iframeHeight,\n                    currentGalleryItem.iframeTitle,\n                );\n                $currentSlide.prepend(markup);\n            } else if (poster) {\n                let dummyImg = '';\n                const isFirstSlide = !this.lGalleryOn;\n                const hasStartAnimation =\n                    !this.lGalleryOn &&\n                    this.zoomFromOrigin &&\n                    this.currentImageSize;\n                if (hasStartAnimation) {\n                    dummyImg = this.getDummyImageContent(\n                        $currentSlide,\n                        index,\n                        '',\n                    );\n                }\n\n                const markup = utils.getVideoPosterMarkup(\n                    poster,\n                    dummyImg || '',\n                    lgVideoStyle,\n                    videoInfo,\n                );\n                $currentSlide.prepend(markup);\n                const delay =\n                    (hasStartAnimation\n                        ? this.settings.startAnimationDuration\n                        : this.settings.backdropDuration) + 100;\n                setTimeout(() => {\n                    this.LGel.trigger(lGEvents.hasVideo, {\n                        index,\n                        src: src,\n                        html5Video: _html5Video,\n                        hasPoster: true,\n                        isFirstSlide,\n                    });\n                }, delay);\n            } else if (videoInfo) {\n                const markup = `<div class=\"lg-video-cont \" style=\"${lgVideoStyle}\"></div>`;\n                $currentSlide.prepend(markup);\n                this.LGel.trigger(lGEvents.hasVideo, {\n                    index,\n                    src: src,\n                    html5Video: _html5Video,\n                    hasPoster: false,\n                });\n            } else {\n                this.setImgMarkup(src, $currentSlide, index);\n                if (srcset || sources) {\n                    const $img = $currentSlide.find('.lg-object');\n                    this.initPictureFill($img);\n                }\n            }\n\n            this.LGel.trigger<AfterAppendSlideEventDetail>(\n                lGEvents.afterAppendSlide,\n                { index },\n            );\n\n            if (\n                this.lGalleryOn &&\n                this.settings.appendSubHtmlTo !== '.lg-sub-html'\n            ) {\n                this.addHtml(index);\n            }\n        }\n\n        // For first time add some delay for displaying the start animation.\n        let _speed = 0;\n\n        // delay for adding complete class. it is 0 except first time.\n        let delay = 0;\n        if (!this.lGalleryOn) {\n            if (this.zoomFromOrigin && this.currentImageSize) {\n                delay = this.settings.startAnimationDuration + 10;\n            } else {\n                delay = this.settings.backdropDuration + 10;\n            }\n        }\n\n        // Do not change the delay value because it is required for zoom plugin.\n        // If gallery opened from direct url (hash) speed value should be 0\n        if (delay && !$LG(document.body).hasClass('lg-from-hash')) {\n            _speed = delay;\n        }\n\n        // Only for first slide\n        if (!this.lGalleryOn && this.zoomFromOrigin && this.currentImageSize) {\n            setTimeout(() => {\n                $currentSlide\n                    .removeClass('lg-start-end-progress lg-start-progress')\n                    .removeAttr('style');\n            }, this.settings.startAnimationDuration + 100);\n            if (!$currentSlide.hasClass('lg-loaded')) {\n                setTimeout(() => {\n                    $currentSlide\n                        .find('.lg-img-wrap')\n                        .append(\n                            utils.getImgMarkup(\n                                index,\n                                src,\n                                '',\n                                srcset,\n                                sizes,\n                                currentGalleryItem.sources,\n                            ),\n                        );\n                    if (srcset || sources) {\n                        const $img = $currentSlide.find('.lg-object');\n                        this.initPictureFill($img);\n                    }\n                    this.onLgObjectLoad(\n                        $currentSlide,\n                        index,\n                        delay,\n                        _speed,\n                        true,\n                    );\n                    const mediaObject = $currentSlide\n                        .find('.lg-object')\n                        .first();\n                    if (\n                        utils.isImageLoaded(\n                            mediaObject.get() as HTMLImageElement,\n                        )\n                    ) {\n                        this.loadContentOnLoad(index, $currentSlide, _speed);\n                    } else {\n                        mediaObject.on('load.lg error.lg', () => {\n                            this.loadContentOnLoad(\n                                index,\n                                $currentSlide,\n                                _speed,\n                            );\n                        });\n                    }\n                }, this.settings.startAnimationDuration + 100);\n            }\n        }\n\n        // SLide content has been added to dom\n        $currentSlide.addClass('lg-loaded');\n        this.onLgObjectLoad($currentSlide, index, delay, _speed, false);\n\n        // @todo check load state for html5 videos\n        if (videoInfo && videoInfo.html5 && !poster) {\n            $currentSlide.addClass('lg-complete lg-complete_');\n        }\n\n        // When gallery is opened once content is loaded (second time) need to add lg-complete class for css styling\n        if (\n            (!this.zoomFromOrigin || !this.currentImageSize) &&\n            $currentSlide.hasClass('lg-complete_') &&\n            !this.lGalleryOn\n        ) {\n            setTimeout(() => {\n                $currentSlide.addClass('lg-complete');\n            }, this.settings.backdropDuration);\n        }\n\n        // Content loaded\n        // Need to set lGalleryOn before calling preload function\n        this.lGalleryOn = true;\n\n        if (rec === true) {\n            if (!$currentSlide.hasClass('lg-complete_')) {\n                $currentSlide\n                    .find('.lg-object')\n                    .first()\n                    .on('load.lg error.lg', () => {\n                        this.preload(index);\n                    });\n            } else {\n                this.preload(index);\n            }\n        }\n    }\n\n    loadContentOnLoad(\n        index: number,\n        $currentSlide: lgQuery,\n        speed: number,\n    ): void {\n        setTimeout(() => {\n            $currentSlide.find('.lg-dummy-img').remove();\n            $currentSlide.removeClass('lg-first-slide');\n            this.outer.removeClass('lg-first-slide-loading');\n            this.isDummyImageRemoved = true;\n            this.preload(index);\n        }, speed + 300);\n    }\n\n    getItemsToBeInsertedToDom(\n        index: number,\n        prevIndex: number,\n        numberOfItems = 0,\n    ): string[] {\n        const itemsToBeInsertedToDom: string[] = [];\n        // Minimum 2 items should be there\n        let possibleNumberOfItems = Math.max(numberOfItems, 3);\n        possibleNumberOfItems = Math.min(\n            possibleNumberOfItems,\n            this.galleryItems.length,\n        );\n        const prevIndexItem = `lg-item-${this.lgId}-${prevIndex}`;\n        if (this.galleryItems.length <= 3) {\n            this.galleryItems.forEach((_element, index) => {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${index}`);\n            });\n            return itemsToBeInsertedToDom;\n        }\n\n        if (index < (this.galleryItems.length - 1) / 2) {\n            for (\n                let idx = index;\n                idx > index - possibleNumberOfItems / 2 && idx >= 0;\n                idx--\n            ) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${idx}`);\n            }\n            const numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for (\n                let idx = 0;\n                idx < possibleNumberOfItems - numberOfExistingItems;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${index + idx + 1}`,\n                );\n            }\n        } else {\n            for (\n                let idx = index;\n                idx <= this.galleryItems.length - 1 &&\n                idx < index + possibleNumberOfItems / 2;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${idx}`);\n            }\n            const numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for (\n                let idx = 0;\n                idx < possibleNumberOfItems - numberOfExistingItems;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${index - idx - 1}`,\n                );\n            }\n        }\n        if (this.settings.loop) {\n            if (index === this.galleryItems.length - 1) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${0}`);\n            } else if (index === 0) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${this.galleryItems.length - 1}`,\n                );\n            }\n        }\n        if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {\n            itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${prevIndex}`);\n        }\n\n        return itemsToBeInsertedToDom;\n    }\n\n    organizeSlideItems(index: number, prevIndex: number): string[] {\n        const itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(\n            index,\n            prevIndex,\n            this.settings.numberOfSlideItemsInDom,\n        );\n\n        itemsToBeInsertedToDom.forEach((item) => {\n            if (this.currentItemsInDom.indexOf(item) === -1) {\n                this.$inner.append(`<div id=\"${item}\" class=\"lg-item\"></div>`);\n            }\n        });\n\n        this.currentItemsInDom.forEach((item) => {\n            if (itemsToBeInsertedToDom.indexOf(item) === -1) {\n                $LG(`#${item}`).remove();\n            }\n        });\n        return itemsToBeInsertedToDom;\n    }\n\n    /**\n     * Get previous index of the slide\n     */\n    getPreviousSlideIndex(): number {\n        let prevIndex = 0;\n        try {\n            const currentItemId = this.outer\n                .find('.lg-current')\n                .first()\n                .attr('id');\n            prevIndex = parseInt(currentItemId.split('-')[3]) || 0;\n        } catch (error) {\n            prevIndex = 0;\n        }\n        return prevIndex;\n    }\n\n    setDownloadValue(index: number): void {\n        if (this.settings.download) {\n            const currentGalleryItem = this.galleryItems[index];\n            const src =\n                currentGalleryItem.downloadUrl !== false &&\n                (currentGalleryItem.downloadUrl || currentGalleryItem.src);\n\n            if (src && !currentGalleryItem.iframe) {\n                this.getElementById('lg-download').attr('href', src);\n            }\n        }\n    }\n\n    makeSlideAnimation(\n        direction: 'next' | 'prev',\n        currentSlideItem: lgQuery,\n        previousSlideItem: lgQuery,\n    ): void {\n        if (this.lGalleryOn) {\n            previousSlideItem.addClass('lg-slide-progress');\n        }\n        setTimeout(\n            () => {\n                // remove all transitions\n                this.outer.addClass('lg-no-trans');\n\n                this.outer\n                    .find('.lg-item')\n                    .removeClass('lg-prev-slide lg-next-slide');\n\n                if (direction === 'prev') {\n                    //prevslide\n                    currentSlideItem.addClass('lg-prev-slide');\n                    previousSlideItem.addClass('lg-next-slide');\n                } else {\n                    // next slide\n                    currentSlideItem.addClass('lg-next-slide');\n                    previousSlideItem.addClass('lg-prev-slide');\n                }\n\n                // give 50 ms for browser to add/remove class\n                setTimeout(() => {\n                    this.outer.find('.lg-item').removeClass('lg-current');\n\n                    currentSlideItem.addClass('lg-current');\n\n                    // reset all transitions\n                    this.outer.removeClass('lg-no-trans');\n                }, 50);\n            },\n            this.lGalleryOn ? this.settings.slideDelay : 0,\n        );\n    }\n\n    /**\n     * Goto a specific slide.\n     * @param {Number} index - index of the slide\n     * @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag\n     * @param {Boolean} fromThumb - true if slide function called via thumbnail click\n     * @param {String} direction - Direction of the slide(next/prev)\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  // to go to 3rd slide\n     *  plugin.slide(2);\n     *\n     */\n    slide(\n        index: number,\n        fromTouch?: boolean,\n        fromThumb?: boolean,\n        direction?: SlideDirection | false,\n    ): void {\n        const prevIndex = this.getPreviousSlideIndex();\n        this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);\n\n        // Prevent multiple call, Required for hsh plugin\n        if (this.lGalleryOn && prevIndex === index) {\n            return;\n        }\n\n        const numberOfGalleryItems = this.galleryItems.length;\n\n        if (!this.lgBusy) {\n            if (this.settings.counter) {\n                this.updateCurrentCounter(index);\n            }\n\n            const currentSlideItem = this.getSlideItem(index);\n            const previousSlideItem = this.getSlideItem(prevIndex);\n\n            const currentGalleryItem = this.galleryItems[index];\n            const videoInfo = currentGalleryItem.__slideVideoInfo;\n\n            this.outer.attr(\n                'data-lg-slide-type',\n                this.getSlideType(currentGalleryItem),\n            );\n            this.setDownloadValue(index);\n\n            if (videoInfo) {\n                const { top, bottom } = this.mediaContainerPosition;\n                const videoSize = utils.getSize(\n                    this.items[index],\n                    this.$lgContent,\n                    top + bottom,\n                    videoInfo && this.settings.videoMaxSize,\n                );\n                this.resizeVideoSlide(index, videoSize);\n            }\n\n            this.LGel.trigger<BeforeSlideDetail>(lGEvents.beforeSlide, {\n                prevIndex,\n                index,\n                fromTouch: !!fromTouch,\n                fromThumb: !!fromThumb,\n            });\n\n            this.lgBusy = true;\n\n            clearTimeout(this.hideBarTimeout);\n\n            this.arrowDisable(index);\n\n            if (!direction) {\n                if (index < prevIndex) {\n                    direction = 'prev';\n                } else if (index > prevIndex) {\n                    direction = 'next';\n                }\n            }\n\n            if (!fromTouch) {\n                this.makeSlideAnimation(\n                    direction as SlideDirection,\n                    currentSlideItem,\n                    previousSlideItem,\n                );\n            } else {\n                this.outer\n                    .find('.lg-item')\n                    .removeClass('lg-prev-slide lg-current lg-next-slide');\n                let touchPrev;\n                let touchNext;\n                if (numberOfGalleryItems > 2) {\n                    touchPrev = index - 1;\n                    touchNext = index + 1;\n\n                    if (index === 0 && prevIndex === numberOfGalleryItems - 1) {\n                        // next slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    } else if (\n                        index === numberOfGalleryItems - 1 &&\n                        prevIndex === 0\n                    ) {\n                        // prev slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    }\n                } else {\n                    touchPrev = 0;\n                    touchNext = 1;\n                }\n\n                if (direction === 'prev') {\n                    this.getSlideItem(touchNext).addClass('lg-next-slide');\n                } else {\n                    this.getSlideItem(touchPrev).addClass('lg-prev-slide');\n                }\n\n                currentSlideItem.addClass('lg-current');\n            }\n\n            // Do not put load content in set timeout as it needs to load immediately when the gallery is opened\n            if (!this.lGalleryOn) {\n                this.loadContent(index, true);\n            }\n\n            setTimeout(() => {\n                if (this.lGalleryOn) {\n                    this.loadContent(index, true);\n                }\n                // Add title if this.settings.appendSubHtmlTo === lg-sub-html\n                if (this.settings.appendSubHtmlTo === '.lg-sub-html') {\n                    this.addHtml(index);\n                }\n            }, (this.lGalleryOn ? this.settings.speed + 50 : 50) + (fromTouch ? 0 : this.settings.slideDelay));\n\n            setTimeout(() => {\n                this.lgBusy = false;\n                previousSlideItem.removeClass('lg-slide-progress');\n                this.LGel.trigger(lGEvents.afterSlide, {\n                    prevIndex: prevIndex,\n                    index,\n                    fromTouch,\n                    fromThumb,\n                });\n            }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));\n        }\n\n        this.index = index;\n    }\n\n    updateCurrentCounter(index: number): void {\n        this.getElementById('lg-counter-current').html(index + 1 + '');\n    }\n\n    updateCounterTotal(): void {\n        this.getElementById('lg-counter-all').html(\n            this.galleryItems.length + '',\n        );\n    }\n\n    getSlideType(item: GalleryItem): 'video' | 'iframe' | 'image' {\n        if (item.__slideVideoInfo) {\n            return 'video';\n        } else if (item.iframe) {\n            return 'iframe';\n        } else {\n            return 'image';\n        }\n    }\n\n    touchMove(startCoords: Coords, endCoords: Coords): void {\n        const distanceX = endCoords.pageX - startCoords.pageX;\n        const distanceY = endCoords.pageY - startCoords.pageY;\n        let allowSwipe = false;\n\n        if (this.swipeDirection) {\n            allowSwipe = true;\n        } else {\n            if (Math.abs(distanceX) > 15) {\n                this.swipeDirection = 'horizontal';\n                allowSwipe = true;\n            } else if (Math.abs(distanceY) > 15) {\n                this.swipeDirection = 'vertical';\n                allowSwipe = true;\n            }\n        }\n\n        if (!allowSwipe) {\n            return;\n        }\n\n        const $currentSlide = this.getSlideItem(this.index);\n\n        if (this.swipeDirection === 'horizontal') {\n            // reset opacity and transition duration\n            this.outer.addClass('lg-dragging');\n\n            // move current slide\n            this.setTranslate($currentSlide, distanceX, 0);\n\n            // move next and prev slide with current slide\n            const width = $currentSlide.get().offsetWidth;\n            const slideWidthAmount = (width * 15) / 100;\n            const gutter = slideWidthAmount - Math.abs((distanceX * 10) / 100);\n            this.setTranslate(\n                this.outer.find('.lg-prev-slide').first(),\n                -width + distanceX - gutter,\n                0,\n            );\n\n            this.setTranslate(\n                this.outer.find('.lg-next-slide').first(),\n                width + distanceX + gutter,\n                0,\n            );\n        } else if (this.swipeDirection === 'vertical') {\n            if (this.settings.swipeToClose) {\n                this.$container.addClass('lg-dragging-vertical');\n\n                const opacity = 1 - Math.abs(distanceY) / window.innerHeight;\n                this.$backdrop.css('opacity', opacity);\n\n                const scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);\n                this.setTranslate($currentSlide, 0, distanceY, scale, scale);\n                if (Math.abs(distanceY) > 100) {\n                    this.outer\n                        .addClass('lg-hide-items')\n                        .removeClass('lg-components-open');\n                }\n            }\n        }\n    }\n\n    touchEnd(endCoords: Coords, startCoords: Coords, event: TouchEvent): void {\n        let distance;\n\n        // keep slide animation for any mode while dragg/swipe\n        if (this.settings.mode !== 'lg-slide') {\n            this.outer.addClass('lg-slide');\n        }\n\n        // set transition duration\n        setTimeout(() => {\n            this.$container.removeClass('lg-dragging-vertical');\n            this.outer\n                .removeClass('lg-dragging lg-hide-items')\n                .addClass('lg-components-open');\n\n            let triggerClick = true;\n\n            if (this.swipeDirection === 'horizontal') {\n                distance = endCoords.pageX - startCoords.pageX;\n                const distanceAbs = Math.abs(\n                    endCoords.pageX - startCoords.pageX,\n                );\n                if (\n                    distance < 0 &&\n                    distanceAbs > this.settings.swipeThreshold\n                ) {\n                    this.goToNextSlide(true);\n                    triggerClick = false;\n                } else if (\n                    distance > 0 &&\n                    distanceAbs > this.settings.swipeThreshold\n                ) {\n                    this.goToPrevSlide(true);\n                    triggerClick = false;\n                }\n            } else if (this.swipeDirection === 'vertical') {\n                distance = Math.abs(endCoords.pageY - startCoords.pageY);\n                if (\n                    this.settings.closable &&\n                    this.settings.swipeToClose &&\n                    distance > 100\n                ) {\n                    this.closeGallery();\n                    return;\n                } else {\n                    this.$backdrop.css('opacity', 1);\n                }\n            }\n            this.outer.find('.lg-item').removeAttr('style');\n\n            if (\n                triggerClick &&\n                Math.abs(endCoords.pageX - startCoords.pageX) < 5\n            ) {\n                // Trigger click if distance is less than 5 pix\n                const target = $LG(event.target);\n                if (this.isPosterElement(target)) {\n                    this.LGel.trigger(lGEvents.posterClick);\n                }\n            }\n\n            this.swipeDirection = undefined;\n        });\n\n        // remove slide class once drag/swipe is completed if mode is not slide\n        setTimeout(() => {\n            if (\n                !this.outer.hasClass('lg-dragging') &&\n                this.settings.mode !== 'lg-slide'\n            ) {\n                this.outer.removeClass('lg-slide');\n            }\n        }, this.settings.speed + 100);\n    }\n\n    enableSwipe(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isMoved = false;\n        let isSwiping = false;\n\n        if (this.settings.enableSwipe) {\n            this.$inner.on('touchstart.lg', (e) => {\n                e.preventDefault();\n                const $item = this.getSlideItem(this.index);\n                if (\n                    ($LG(e.target).hasClass('lg-item') ||\n                        $item.get().contains(e.target)) &&\n                    !this.outer.hasClass('lg-zoomed') &&\n                    !this.lgBusy &&\n                    e.targetTouches.length === 1\n                ) {\n                    isSwiping = true;\n                    this.touchAction = 'swipe';\n                    this.manageSwipeClass();\n                    startCoords = {\n                        pageX: e.targetTouches[0].pageX,\n                        pageY: e.targetTouches[0].pageY,\n                    };\n                }\n            });\n\n            this.$inner.on('touchmove.lg', (e) => {\n                e.preventDefault();\n                if (\n                    isSwiping &&\n                    this.touchAction === 'swipe' &&\n                    e.targetTouches.length === 1\n                ) {\n                    endCoords = {\n                        pageX: e.targetTouches[0].pageX,\n                        pageY: e.targetTouches[0].pageY,\n                    };\n                    this.touchMove(startCoords, endCoords);\n                    isMoved = true;\n                }\n            });\n\n            this.$inner.on('touchend.lg', (event: TouchEvent) => {\n                if (this.touchAction === 'swipe') {\n                    if (isMoved) {\n                        isMoved = false;\n                        this.touchEnd(endCoords, startCoords, event);\n                    } else if (isSwiping) {\n                        const target = $LG(event.target);\n                        if (this.isPosterElement(target)) {\n                            this.LGel.trigger(lGEvents.posterClick);\n                        }\n                    }\n                    this.touchAction = undefined;\n                    isSwiping = false;\n                }\n            });\n        }\n    }\n\n    enableDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDraging = false;\n        let isMoved = false;\n        if (this.settings.enableDrag) {\n            this.outer.on('mousedown.lg', (e) => {\n                const $item = this.getSlideItem(this.index);\n                if (\n                    $LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)\n                ) {\n                    if (!this.outer.hasClass('lg-zoomed') && !this.lgBusy) {\n                        e.preventDefault();\n                        if (!this.lgBusy) {\n                            this.manageSwipeClass();\n                            startCoords = {\n                                pageX: e.pageX,\n                                pageY: e.pageY,\n                            };\n                            isDraging = true;\n\n                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                            this.outer.get().scrollLeft += 1;\n                            this.outer.get().scrollLeft -= 1;\n\n                            // *\n\n                            this.outer\n                                .removeClass('lg-grab')\n                                .addClass('lg-grabbing');\n\n                            this.LGel.trigger(lGEvents.dragStart);\n                        }\n                    }\n                }\n            });\n\n            $LG(window).on(`mousemove.lg.global${this.lgId}`, (e) => {\n                if (isDraging && this.lgOpened) {\n                    isMoved = true;\n                    endCoords = {\n                        pageX: e.pageX,\n                        pageY: e.pageY,\n                    };\n                    this.touchMove(startCoords, endCoords);\n                    this.LGel.trigger(lGEvents.dragMove);\n                }\n            });\n\n            $LG(window).on(`mouseup.lg.global${this.lgId}`, (event) => {\n                if (!this.lgOpened) {\n                    return;\n                }\n                const target = $LG(event.target);\n                if (isMoved) {\n                    isMoved = false;\n                    this.touchEnd(endCoords, startCoords, event);\n                    this.LGel.trigger(lGEvents.dragEnd);\n                } else if (this.isPosterElement(target)) {\n                    this.LGel.trigger(lGEvents.posterClick);\n                }\n\n                // Prevent execution on click\n                if (isDraging) {\n                    isDraging = false;\n                    this.outer.removeClass('lg-grabbing').addClass('lg-grab');\n                }\n            });\n        }\n    }\n\n    manageSwipeClass(): void {\n        let _touchNext = this.index + 1;\n        let _touchPrev = this.index - 1;\n        if (this.settings.loop && this.galleryItems.length > 2) {\n            if (this.index === 0) {\n                _touchPrev = this.galleryItems.length - 1;\n            } else if (this.index === this.galleryItems.length - 1) {\n                _touchNext = 0;\n            }\n        }\n\n        this.outer.find('.lg-item').removeClass('lg-next-slide lg-prev-slide');\n        if (_touchPrev > -1) {\n            this.getSlideItem(_touchPrev).addClass('lg-prev-slide');\n        }\n\n        this.getSlideItem(_touchNext).addClass('lg-next-slide');\n    }\n\n    /**\n     * Go to next slide\n     * @param {Boolean} fromTouch - true if slide function called via touch event\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.goToNextSlide();\n     * @see <a href=\"/demos/methods/\">Demo</a>\n     */\n    goToNextSlide(fromTouch?: boolean): void {\n        let _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n\n        if (!this.lgBusy) {\n            if (this.index + 1 < this.galleryItems.length) {\n                this.index++;\n                this.LGel.trigger(lGEvents.beforeNextSlide, {\n                    index: this.index,\n                });\n                this.slide(this.index, !!fromTouch, false, 'next');\n            } else {\n                if (_loop) {\n                    this.index = 0;\n                    this.LGel.trigger(lGEvents.beforeNextSlide, {\n                        index: this.index,\n                    });\n                    this.slide(this.index, !!fromTouch, false, 'next');\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass('lg-right-end');\n                    setTimeout(() => {\n                        this.outer.removeClass('lg-right-end');\n                    }, 400);\n                }\n            }\n        }\n    }\n\n    /**\n     * Go to previous slides\n     * @param {Boolean} fromTouch - true if slide function called via touch event\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery({});\n     *  plugin.goToPrevSlide();\n     * @see <a href=\"/demos/methods/\">Demo</a>\n     *\n     */\n    goToPrevSlide(fromTouch?: boolean): void {\n        let _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n\n        if (!this.lgBusy) {\n            if (this.index > 0) {\n                this.index--;\n                this.LGel.trigger(lGEvents.beforePrevSlide, {\n                    index: this.index,\n                    fromTouch,\n                });\n                this.slide(this.index, !!fromTouch, false, 'prev');\n            } else {\n                if (_loop) {\n                    this.index = this.galleryItems.length - 1;\n                    this.LGel.trigger(lGEvents.beforePrevSlide, {\n                        index: this.index,\n                        fromTouch,\n                    });\n                    this.slide(this.index, !!fromTouch, false, 'prev');\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass('lg-left-end');\n                    setTimeout(() => {\n                        this.outer.removeClass('lg-left-end');\n                    }, 400);\n                }\n            }\n        }\n    }\n\n    keyPress(): void {\n        $LG(window).on(`keydown.lg.global${this.lgId}`, (e) => {\n            if (\n                this.lgOpened &&\n                this.settings.escKey === true &&\n                e.keyCode === 27\n            ) {\n                e.preventDefault();\n                if (\n                    this.settings.allowMediaOverlap &&\n                    this.outer.hasClass('lg-can-toggle') &&\n                    this.outer.hasClass('lg-components-open')\n                ) {\n                    this.outer.removeClass('lg-components-open');\n                } else {\n                    this.closeGallery();\n                }\n            }\n            if (this.lgOpened && this.galleryItems.length > 1) {\n                if (e.keyCode === 37) {\n                    e.preventDefault();\n                    this.goToPrevSlide();\n                }\n\n                if (e.keyCode === 39) {\n                    e.preventDefault();\n                    this.goToNextSlide();\n                }\n            }\n        });\n    }\n\n    arrow(): void {\n        this.getElementById('lg-prev').on('click.lg', () => {\n            this.goToPrevSlide();\n        });\n        this.getElementById('lg-next').on('click.lg', () => {\n            this.goToNextSlide();\n        });\n    }\n\n    arrowDisable(index: number): void {\n        // Disable arrows if settings.hideControlOnEnd is true\n        if (!this.settings.loop && this.settings.hideControlOnEnd) {\n            const $prev = this.getElementById('lg-prev');\n            const $next = this.getElementById('lg-next');\n            if (index + 1 === this.galleryItems.length) {\n                $next.attr('disabled', 'disabled').addClass('disabled');\n            } else {\n                $next.removeAttr('disabled').removeClass('disabled');\n            }\n\n            if (index === 0) {\n                $prev.attr('disabled', 'disabled').addClass('disabled');\n            } else {\n                $prev.removeAttr('disabled').removeClass('disabled');\n            }\n        }\n    }\n\n    setTranslate(\n        $el: lgQuery,\n        xValue: number,\n        yValue: number,\n        scaleX = 1,\n        scaleY = 1,\n    ): void {\n        $el.css(\n            'transform',\n            'translate3d(' +\n                xValue +\n                'px, ' +\n                yValue +\n                'px, 0px) scale3d(' +\n                scaleX +\n                ', ' +\n                scaleY +\n                ', 1)',\n        );\n    }\n\n    mousewheel(): void {\n        this.outer.on('mousewheel.lg', (e) => {\n            if (!e.deltaY || this.galleryItems.length < 2) {\n                return;\n            }\n\n            if (e.deltaY > 0) {\n                this.goToPrevSlide();\n            } else {\n                this.goToNextSlide();\n            }\n\n            e.preventDefault();\n        });\n    }\n\n    isSlideElement(target: lgQuery): boolean {\n        return (\n            target.hasClass('lg-outer') ||\n            target.hasClass('lg-item') ||\n            target.hasClass('lg-img-wrap')\n        );\n    }\n\n    isPosterElement(target: lgQuery): boolean {\n        const playButton = this.getSlideItem(this.index)\n            .find('.lg-video-play-button')\n            .get();\n        return (\n            target.hasClass('lg-video-poster') ||\n            target.hasClass('lg-video-play-button') ||\n            (playButton && playButton.contains(target.get()))\n        );\n    }\n\n    /**\n     * Maximize minimize inline gallery.\n     * @category lGPublicMethods\n     */\n    toggleMaximize(): void {\n        this.getElementById('lg-maximize').on('click.lg', () => {\n            this.$container.toggleClass('lg-inline');\n            this.refreshOnResize();\n        });\n    }\n\n    invalidateItems(): void {\n        for (let index = 0; index < this.items.length; index++) {\n            const element = this.items[index];\n            const $element = $LG(element);\n            $element.off(`click.lgcustom-item-${$element.attr('data-lg-id')}`);\n        }\n    }\n\n    manageCloseGallery(): void {\n        if (!this.settings.closable) return;\n        let mousedown = false;\n        this.getElementById('lg-close').on('click.lg', () => {\n            this.closeGallery();\n        });\n\n        if (this.settings.closeOnTap) {\n            // If you drag the slide and release outside gallery gets close on chrome\n            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer\n            this.outer.on('mousedown.lg', (e) => {\n                const target = $LG(e.target);\n                if (this.isSlideElement(target)) {\n                    mousedown = true;\n                } else {\n                    mousedown = false;\n                }\n            });\n\n            this.outer.on('mousemove.lg', () => {\n                mousedown = false;\n            });\n\n            this.outer.on('mouseup.lg', (e) => {\n                const target = $LG(e.target);\n                if (this.isSlideElement(target) && mousedown) {\n                    if (!this.outer.hasClass('lg-dragging')) {\n                        this.closeGallery();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Close lightGallery if it is opened.\n     *\n     * @description If closable is false in the settings, you need to pass true via closeGallery method to force close gallery\n     * @return returns the estimated time to close gallery completely including the close animation duration\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.closeGallery();\n     *\n     */\n    closeGallery(force?: boolean): number {\n        if (!this.lgOpened || (!this.settings.closable && !force)) {\n            return 0;\n        }\n        this.LGel.trigger(lGEvents.beforeClose);\n        $LG(window).scrollTop(this.prevScrollTop);\n\n        const currentItem = this.items[this.index];\n        let transform: string | undefined;\n        if (this.zoomFromOrigin && currentItem) {\n            const { top, bottom } = this.mediaContainerPosition;\n            const imageSize = utils.getSize(\n                currentItem,\n                this.$lgContent,\n                top + bottom,\n                this.galleryItems[this.index].__slideVideoInfo &&\n                    this.settings.videoMaxSize,\n            );\n            transform = utils.getTransform(\n                currentItem,\n                this.$lgContent,\n                top,\n                bottom,\n                imageSize,\n            );\n        }\n        if (this.zoomFromOrigin && transform) {\n            this.outer.addClass('lg-closing lg-zoom-from-image');\n            this.getSlideItem(this.index)\n                .addClass('lg-start-end-progress')\n                .css(\n                    'transition-duration',\n                    this.settings.startAnimationDuration + 'ms',\n                )\n                .css('transform', transform);\n        } else {\n            this.outer.addClass('lg-hide-items');\n            // lg-zoom-from-image is used for setting the opacity to 1 if zoomFromOrigin is true\n            // If the closing item doesn't have the lg-size attribute, remove this class to avoid the closing css conflicts\n            this.outer.removeClass('lg-zoom-from-image');\n        }\n\n        // Unbind all events added by lightGallery\n        // @todo\n        //this.$el.off('.lg.tm');\n\n        this.destroyModules();\n\n        this.lGalleryOn = false;\n        this.isDummyImageRemoved = false;\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n\n        clearTimeout(this.hideBarTimeout);\n        this.hideBarTimeout = false;\n        $LG('html').removeClass('lg-on');\n\n        this.outer.removeClass('lg-visible lg-components-open');\n\n        // Resetting opacity to 0 isd required as  vertical swipe to close function adds inline opacity.\n        this.$backdrop.removeClass('in').css('opacity', 0);\n\n        const removeTimeout =\n            this.zoomFromOrigin && transform\n                ? Math.max(\n                      this.settings.startAnimationDuration,\n                      this.settings.backdropDuration,\n                  )\n                : this.settings.backdropDuration;\n        this.$container.removeClass('lg-show-in');\n\n        // Once the closign animation is completed and gallery is invisible\n        setTimeout(() => {\n            if (this.zoomFromOrigin && transform) {\n                this.outer.removeClass('lg-zoom-from-image');\n            }\n            this.$container.removeClass('lg-show');\n\n            // Need to remove inline opacity as it is used in the stylesheet as well\n            this.$backdrop\n                .removeAttr('style')\n                .css(\n                    'transition-duration',\n                    this.settings.backdropDuration + 'ms',\n                );\n\n            this.outer.removeClass(`lg-closing ${this.settings.startClass}`);\n\n            this.getSlideItem(this.index).removeClass('lg-start-end-progress');\n            this.$inner.empty();\n            if (this.lgOpened) {\n                this.LGel.trigger(lGEvents.afterClose, {\n                    instance: this,\n                });\n            }\n            if (this.outer.get()) {\n                this.outer.get().blur();\n            }\n\n            this.lgOpened = false;\n        }, removeTimeout + 100);\n        return removeTimeout + 100;\n    }\n\n    initModules(): void {\n        this.plugins.forEach((module) => {\n            try {\n                module.init();\n            } catch (err) {\n                console.warn(\n                    `lightGallery:- make sure lightGallery module is properly initiated`,\n                );\n            }\n        });\n    }\n\n    destroyModules(destroy?: true): void {\n        this.plugins.forEach((module) => {\n            try {\n                if (destroy) {\n                    module.destroy();\n                } else {\n                    module.closeGallery && module.closeGallery();\n                }\n            } catch (err) {\n                console.warn(\n                    `lightGallery:- make sure lightGallery module is properly destroyed`,\n                );\n            }\n        });\n    }\n\n    /**\n     * Refresh lightGallery with new set of children.\n     *\n     * @description This is useful to update the gallery when the child elements are changed without calling destroy method.\n     *\n     * If you are using dynamic mode, you can pass the modified array of dynamicEl as the first parameter to refresh the dynamic gallery\n     * @see <a href=\"/demos/dynamic-mode/\">Demo</a>\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  // Delete or add children, then call\n     *  plugin.refresh();\n     *\n     */\n    refresh(galleryItems?: GalleryItem[]): void {\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        if (galleryItems) {\n            this.galleryItems = galleryItems;\n        } else {\n            this.galleryItems = this.getItems();\n        }\n        this.updateControls();\n        this.openGalleryOnItemClick();\n        this.LGel.trigger(lGEvents.updateSlides);\n    }\n\n    updateControls(): void {\n        this.addSlideVideoInfo(this.galleryItems);\n        this.updateCounterTotal();\n        this.manageSingleSlideClassName();\n    }\n\n    /**\n     * Destroy lightGallery.\n     * Destroy lightGallery and its plugin instances completely\n     *\n     * @description This method also calls CloseGallery function internally\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.destroy();\n     *\n     */\n    destroy(): void {\n        const closeTimeout = this.closeGallery(true);\n        setTimeout(() => {\n            this.destroyModules(true);\n            if (!this.settings.dynamic) {\n                this.invalidateItems();\n            }\n            $LG(window).off(`.lg.global${this.lgId}`);\n            this.LGel.off('.lg');\n            this.$container.remove();\n        }, closeTimeout);\n    }\n}\n","import { LightGallerySettings } from './lg-settings';\nimport { LightGallery } from './lightgallery';\n\nfunction lightGallery(\n    el: HTMLElement,\n    options?: LightGallerySettings,\n): LightGallery {\n    return new LightGallery(el, options);\n}\nexport default lightGallery;\n",null,"export interface ThumbnailsSettings {\n    /**\n     * Enable thumbnails for the gallery\n     */\n    thumbnail: boolean;\n\n    /*\n     * Enable thumbnail animation.\n     */\n    animateThumb: boolean;\n\n    /**\n     * Position of selected thumbnail.\n     */\n    currentPagerPosition: 'left' | 'middle' | 'right';\n\n    /**\n     * Position of thumbnails.\n     */\n    alignThumbnails: 'left' | 'middle' | 'right';\n\n    /**\n     * Width of each thumbnails.\n     */\n    thumbWidth: number;\n\n    /**\n     * Height of each thumbnails. Applicable only if animateThumb is false.\n     */\n    thumbHeight: string;\n\n    /**\n     * Spacing between each thumbnails\n     */\n    thumbMargin: number;\n\n    /**\n     * control where the thumbnails should be appended.\n     * By default, thumbnails are appended to '.lg-components' which has inbuilt open close transitions\n     * If you don't want initial thumbnails transitions, or want to do more customization,\n     * you can append thumbnails to the lightGalley outer div -\n     * <a href=\"/demos/thumbnails/#static-thumbnails\">Demo</a>\n     */\n    appendThumbnailsTo: '.lg-outer' | '.lg-components';\n\n    /**\n     * Enable toggle captions and thumbnails.\n     * @description not applicable if allowMediaOverlap is false\n     */\n    toggleThumb: boolean;\n\n    /**\n     * Enables desktop mouse drag support for thumbnails.\n     */\n    enableThumbDrag: boolean;\n\n    /**\n     * Enables thumbnail touch/swipe support for touch devices\n     */\n    enableThumbSwipe: boolean;\n\n    /**\n     * By setting the thumbnailSwipeThreshold (in px) you can set how far the user must swipe for the next/prev slide.\n     */\n    thumbnailSwipeThreshold: number;\n\n    /**\n     * You can automatically load thumbnails for YouTube videos from YouTube by setting loadYouTubeThumbnail true\n     */\n    loadYouTubeThumbnail: boolean;\n\n    /**\n     * You can specify the thumbnail size by setting respective number.\n     */\n    //@todo add demo\n    youTubeThumbSize: number;\n}\n\nexport const thumbnailsSettings: ThumbnailsSettings = {\n    thumbnail: true,\n\n    animateThumb: true,\n    currentPagerPosition: 'middle',\n    alignThumbnails: 'middle',\n\n    thumbWidth: 100,\n    thumbHeight: '80px',\n    thumbMargin: 5,\n\n    appendThumbnailsTo: '.lg-components',\n    toggleThumb: false,\n\n    enableThumbDrag: true,\n    enableThumbSwipe: true,\n    thumbnailSwipeThreshold: 10,\n\n    loadYouTubeThumbnail: true,\n    youTubeThumbSize: 1,\n};\n","import {\n    ThumbnailsSettings,\n    thumbnailsSettings,\n} from './lg-thumbnail-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { GalleryItem } from '../../lg-utils';\nimport { lGEvents } from '../../lg-events';\ninterface ThumbDragUtils {\n    cords: {\n        startX: number;\n        endX: number;\n    };\n    isMoved: boolean;\n    newTranslateX: number;\n    startTime: Date;\n    endTime: Date;\n    touchMoveTime: number;\n}\ninterface ThumbnailGalleryItem extends GalleryItem {\n    thumb: string;\n}\nexport default class Thumbnail {\n    private core: LightGallery;\n    private $thumbOuter!: lgQuery;\n    private $lgThumb!: lgQuery;\n    private thumbOuterWidth = 0;\n    private thumbTotalWidth = 0;\n    private translateX = 0;\n    private thumbClickable = false;\n    private settings!: ThumbnailsSettings;\n    private $LG!: LgQuery;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        return this;\n    }\n\n    init(): void {\n        // extend module default settings with lightGallery core settings\n        this.settings = {\n            ...thumbnailsSettings,\n            ...this.core.settings,\n        };\n        this.thumbOuterWidth = 0;\n        this.thumbTotalWidth =\n            this.core.galleryItems.length *\n            (this.settings.thumbWidth + this.settings.thumbMargin);\n\n        // Thumbnail animation value\n        this.translateX = 0;\n\n        this.setAnimateThumbStyles();\n\n        if (!this.core.settings.allowMediaOverlap) {\n            this.settings.toggleThumb = false;\n        }\n\n        if (this.settings.thumbnail) {\n            this.build();\n            if (this.settings.animateThumb) {\n                if (this.settings.enableThumbDrag) {\n                    this.enableThumbDrag();\n                }\n\n                if (this.settings.enableThumbSwipe) {\n                    this.enableThumbSwipe();\n                }\n\n                this.thumbClickable = false;\n            } else {\n                this.thumbClickable = true;\n            }\n\n            this.toggleThumbBar();\n            this.thumbKeyPress();\n        }\n    }\n\n    build(): void {\n        this.setThumbMarkup();\n        this.manageActiveClassOnSlideChange();\n        this.$lgThumb.first().on('click.lg touchend.lg', (e: CustomEvent) => {\n            const $target = this.$LG(e.target);\n            if (!$target.hasAttribute('data-lg-item-id')) {\n                return;\n            }\n            setTimeout(() => {\n                // In IE9 and bellow touch does not support\n                // Go to slide if browser does not support css transitions\n                if (this.thumbClickable && !this.core.lgBusy) {\n                    const index = parseInt($target.attr('data-lg-item-id'));\n                    this.core.slide(index, false, true, false);\n                }\n            }, 50);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeSlide}.thumb`, (event) => {\n            const { index } = event.detail;\n            this.animateThumb(index);\n        });\n        this.core.LGel.on(`${lGEvents.beforeOpen}.thumb`, () => {\n            this.thumbOuterWidth = this.core.outer.get().offsetWidth;\n        });\n\n        this.core.LGel.on(`${lGEvents.updateSlides}.thumb`, () => {\n            this.rebuildThumbnails();\n        });\n        this.core.LGel.on(`${lGEvents.containerResize}.thumb`, () => {\n            if (!this.core.lgOpened) return;\n            setTimeout(() => {\n                this.thumbOuterWidth = this.core.outer.get().offsetWidth;\n                this.animateThumb(this.core.index);\n                this.thumbOuterWidth = this.core.outer.get().offsetWidth;\n            }, 50);\n        });\n    }\n\n    setThumbMarkup(): void {\n        let thumbOuterClassNames = 'lg-thumb-outer ';\n\n        if (this.settings.alignThumbnails) {\n            thumbOuterClassNames += `lg-thumb-align-${this.settings.alignThumbnails}`;\n        }\n\n        const html = `<div class=\"${thumbOuterClassNames}\">\n        <div class=\"lg-thumb lg-group\">\n        </div>\n        </div>`;\n\n        this.core.outer.addClass('lg-has-thumb');\n\n        if (this.settings.appendThumbnailsTo === '.lg-components') {\n            this.core.$lgComponents.append(html);\n        } else {\n            this.core.outer.append(html);\n        }\n\n        this.$thumbOuter = this.core.outer.find('.lg-thumb-outer').first();\n        this.$lgThumb = this.core.outer.find('.lg-thumb').first();\n\n        if (this.settings.animateThumb) {\n            this.core.outer\n                .find('.lg-thumb')\n                .css('transition-duration', this.core.settings.speed + 'ms')\n                .css('width', this.thumbTotalWidth + 'px')\n                .css('position', 'relative');\n        }\n\n        this.setThumbItemHtml(\n            (this.core.galleryItems as unknown) as ThumbnailGalleryItem[],\n        );\n    }\n\n    enableThumbDrag(): void {\n        let thumbDragUtils: ThumbDragUtils = {\n            cords: {\n                startX: 0,\n                endX: 0,\n            },\n            isMoved: false,\n            newTranslateX: 0,\n            startTime: new Date(),\n            endTime: new Date(),\n            touchMoveTime: 0,\n        };\n\n        let isDragging = false;\n\n        this.$thumbOuter.addClass('lg-grab');\n\n        this.core.outer\n            .find('.lg-thumb')\n            .first()\n            .on('mousedown.lg.thumb', (e) => {\n                if (this.thumbTotalWidth > this.thumbOuterWidth) {\n                    // execute only on .lg-object\n                    e.preventDefault();\n                    thumbDragUtils.cords.startX = e.pageX;\n\n                    thumbDragUtils.startTime = new Date();\n                    this.thumbClickable = false;\n\n                    isDragging = true;\n\n                    // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                    this.core.outer.get().scrollLeft += 1;\n                    this.core.outer.get().scrollLeft -= 1;\n\n                    // *\n                    this.$thumbOuter\n                        .removeClass('lg-grab')\n                        .addClass('lg-grabbing');\n                }\n            });\n\n        this.$LG(window).on(\n            `mousemove.lg.thumb.global${this.core.lgId}`,\n            (e) => {\n                if (!this.core.lgOpened) return;\n                if (isDragging) {\n                    thumbDragUtils.cords.endX = e.pageX;\n\n                    thumbDragUtils = this.onThumbTouchMove(thumbDragUtils);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.thumb.global${this.core.lgId}`, () => {\n            if (!this.core.lgOpened) return;\n            if (thumbDragUtils.isMoved) {\n                thumbDragUtils = this.onThumbTouchEnd(thumbDragUtils);\n            } else {\n                this.thumbClickable = true;\n            }\n\n            if (isDragging) {\n                isDragging = false;\n                this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');\n            }\n        });\n    }\n\n    enableThumbSwipe(): void {\n        let thumbDragUtils: ThumbDragUtils = {\n            cords: {\n                startX: 0,\n                endX: 0,\n            },\n            isMoved: false,\n            newTranslateX: 0,\n            startTime: new Date(),\n            endTime: new Date(),\n            touchMoveTime: 0,\n        };\n\n        this.$lgThumb.on('touchstart.lg', (e: TouchEvent) => {\n            if (this.thumbTotalWidth > this.thumbOuterWidth) {\n                e.preventDefault();\n                thumbDragUtils.cords.startX = e.targetTouches[0].pageX;\n                this.thumbClickable = false;\n                thumbDragUtils.startTime = new Date();\n            }\n        });\n\n        this.$lgThumb.on('touchmove.lg', (e: TouchEvent) => {\n            if (this.thumbTotalWidth > this.thumbOuterWidth) {\n                e.preventDefault();\n                thumbDragUtils.cords.endX = e.targetTouches[0].pageX;\n                thumbDragUtils = this.onThumbTouchMove(thumbDragUtils);\n            }\n        });\n\n        this.$lgThumb.on('touchend.lg', () => {\n            if (thumbDragUtils.isMoved) {\n                thumbDragUtils = this.onThumbTouchEnd(thumbDragUtils);\n            } else {\n                this.thumbClickable = true;\n            }\n        });\n    }\n\n    // Rebuild thumbnails\n    rebuildThumbnails(): void {\n        // Remove transitions\n        this.$thumbOuter.addClass('lg-rebuilding-thumbnails');\n        setTimeout(() => {\n            this.thumbTotalWidth =\n                this.core.galleryItems.length *\n                (this.settings.thumbWidth + this.settings.thumbMargin);\n            this.$lgThumb.css('width', this.thumbTotalWidth + 'px');\n            this.$lgThumb.empty();\n            this.setThumbItemHtml(\n                (this.core.galleryItems as unknown) as ThumbnailGalleryItem[],\n            );\n            this.animateThumb(this.core.index);\n        }, 50);\n        setTimeout(() => {\n            this.$thumbOuter.removeClass('lg-rebuilding-thumbnails');\n        }, 200);\n    }\n\n    // @ts-check\n\n    setTranslate(value: number): void {\n        this.$lgThumb.css(\n            'transform',\n            'translate3d(-' + value + 'px, 0px, 0px)',\n        );\n    }\n\n    getPossibleTransformX(left: number): number {\n        if (left > this.thumbTotalWidth - this.thumbOuterWidth) {\n            left = this.thumbTotalWidth - this.thumbOuterWidth;\n        }\n\n        if (left < 0) {\n            left = 0;\n        }\n        return left;\n    }\n\n    animateThumb(index: number): void {\n        this.$lgThumb.css(\n            'transition-duration',\n            this.core.settings.speed + 'ms',\n        );\n        if (this.settings.animateThumb) {\n            let position = 0;\n            switch (this.settings.currentPagerPosition) {\n                case 'left':\n                    position = 0;\n                    break;\n                case 'middle':\n                    position =\n                        this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;\n                    break;\n                case 'right':\n                    position = this.thumbOuterWidth - this.settings.thumbWidth;\n            }\n            this.translateX =\n                (this.settings.thumbWidth + this.settings.thumbMargin) * index -\n                1 -\n                position;\n            if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {\n                this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;\n            }\n\n            if (this.translateX < 0) {\n                this.translateX = 0;\n            }\n\n            this.setTranslate(this.translateX);\n        }\n    }\n\n    onThumbTouchMove(thumbDragUtils: ThumbDragUtils): ThumbDragUtils {\n        thumbDragUtils.newTranslateX = this.translateX;\n        thumbDragUtils.isMoved = true;\n\n        thumbDragUtils.touchMoveTime = new Date().valueOf();\n\n        thumbDragUtils.newTranslateX -=\n            thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n\n        thumbDragUtils.newTranslateX = this.getPossibleTransformX(\n            thumbDragUtils.newTranslateX,\n        );\n\n        // move current slide\n        this.setTranslate(thumbDragUtils.newTranslateX);\n        this.$thumbOuter.addClass('lg-dragging');\n\n        return thumbDragUtils;\n    }\n\n    onThumbTouchEnd(thumbDragUtils: ThumbDragUtils): ThumbDragUtils {\n        thumbDragUtils.isMoved = false;\n        thumbDragUtils.endTime = new Date();\n        this.$thumbOuter.removeClass('lg-dragging');\n\n        const touchDuration =\n            thumbDragUtils.endTime.valueOf() -\n            thumbDragUtils.startTime.valueOf();\n        let distanceXnew =\n            thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n        let speedX = Math.abs(distanceXnew) / touchDuration;\n        // Some magical numbers\n        // Can be improved\n        if (\n            speedX > 0.15 &&\n            thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30\n        ) {\n            speedX += 1;\n\n            if (speedX > 2) {\n                speedX += 1;\n            }\n            speedX =\n                speedX +\n                speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);\n            this.$lgThumb.css(\n                'transition-duration',\n                Math.min(speedX - 1, 2) + 'settings',\n            );\n\n            distanceXnew = distanceXnew * speedX;\n\n            this.translateX = this.getPossibleTransformX(\n                this.translateX - distanceXnew,\n            );\n            this.setTranslate(this.translateX);\n        } else {\n            this.translateX = thumbDragUtils.newTranslateX;\n        }\n        if (\n            Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) <\n            this.settings.thumbnailSwipeThreshold\n        ) {\n            this.thumbClickable = true;\n        }\n\n        return thumbDragUtils;\n    }\n\n    getThumbHtml(thumb: string, index: number): string {\n        const slideVideoInfo =\n            this.core.galleryItems[index].__slideVideoInfo || {};\n        let thumbImg;\n\n        if (slideVideoInfo.youtube) {\n            if (this.settings.loadYouTubeThumbnail) {\n                thumbImg =\n                    '//img.youtube.com/vi/' +\n                    slideVideoInfo.youtube[1] +\n                    '/' +\n                    this.settings.youTubeThumbSize +\n                    '.jpg';\n            } else {\n                thumbImg = thumb;\n            }\n        } else {\n            thumbImg = thumb;\n        }\n\n        return `<div data-lg-item-id=\"${index}\" class=\"lg-thumb-item ${\n            index === this.core.index ? ' active' : ''\n        }\" \n        style=\"width:${this.settings.thumbWidth}px; height: ${\n            this.settings.thumbHeight\n        };\n            margin-right: ${this.settings.thumbMargin}px;\">\n            <img data-lg-item-id=\"${index}\" src=\"${thumbImg}\" />\n        </div>`;\n    }\n\n    getThumbItemHtml(items: ThumbnailGalleryItem[]): string {\n        let thumbList = '';\n        for (let i = 0; i < items.length; i++) {\n            thumbList += this.getThumbHtml(items[i].thumb, i);\n        }\n\n        return thumbList;\n    }\n\n    setThumbItemHtml(items: ThumbnailGalleryItem[]): void {\n        const thumbList = this.getThumbItemHtml(items);\n        this.$lgThumb.html(thumbList);\n    }\n\n    setAnimateThumbStyles(): void {\n        if (this.settings.animateThumb) {\n            this.core.outer.addClass('lg-animate-thumb');\n        }\n    }\n\n    // Manage thumbnail active calss\n    manageActiveClassOnSlideChange(): void {\n        // manage active class for thumbnail\n        this.core.LGel.on(\n            `${lGEvents.beforeSlide}.thumb`,\n            (event: CustomEvent) => {\n                const $thumb = this.core.outer.find('.lg-thumb-item');\n                const { index } = event.detail;\n                $thumb.removeClass('active');\n                $thumb.eq(index).addClass('active');\n            },\n        );\n    }\n\n    // Toggle thumbnail bar\n    toggleThumbBar(): void {\n        if (this.settings.toggleThumb) {\n            this.core.outer.addClass('lg-can-toggle');\n            this.core.$toolbar.append(\n                '<button type=\"button\" aria-label=\"Toggle thumbnails\" class=\"lg-toggle-thumb lg-icon\"></button>',\n            );\n            this.core.outer\n                .find('.lg-toggle-thumb')\n                .first()\n                .on('click.lg', () => {\n                    this.core.outer.toggleClass('lg-components-open');\n                });\n        }\n    }\n\n    thumbKeyPress(): void {\n        this.$LG(window).on(`keydown.lg.thumb.global${this.core.lgId}`, (e) => {\n            if (!this.core.lgOpened || !this.settings.toggleThumb) return;\n\n            if (e.keyCode === 38) {\n                e.preventDefault();\n                this.core.outer.addClass('lg-components-open');\n            } else if (e.keyCode === 40) {\n                e.preventDefault();\n                this.core.outer.removeClass('lg-components-open');\n            }\n        });\n    }\n\n    destroy(): void {\n        if (this.settings.thumbnail) {\n            this.$LG(window).off(`.lg.thumb.global${this.core.lgId}`);\n            this.core.LGel.off('.lg.thumb');\n            this.core.LGel.off('.thumb');\n            this.$thumbOuter.remove();\n            this.core.outer.removeClass('lg-has-thumb');\n        }\n    }\n}\n",null,"export interface ActualSizeIcons {\n    zoomIn: 'lg-zoom-in' | 'lg-actual-size';\n    zoomOut: 'lg-zoom-out' | 'lg-actual-size';\n}\nexport interface ZoomSettings {\n    /**\n     * Value of zoom should be incremented/decremented\n     */\n    scale: number;\n\n    /**\n     * Enable/Disable zoom option\n     */\n    zoom: boolean;\n\n    /**\n     * Enable actual size icon.\n     */\n    actualSize: boolean;\n\n    /**\n     * Once the slide transition is completed, how much time should take zoom plugin to activate\n     * @description Some css styles will be added to the images if zoom is enabled.\n     * So it might conflict if you add any custom styles to the images such as the initial transition while opening the gallery.\n     * So you can delay adding zoom related styles to the images by changing the value of enableZoomAfter.\n     */\n    enableZoomAfter: number;\n\n    /**\n     * Show zoom in, zoom out icons\n     */\n    showZoomInOutIcons: boolean;\n\n    /**\n     * Actual size icons classnames.\n     * Specify classnames for both ZoomIn and ZoomOut states\n     * You can use `actualSizeIcons: { zoomIn: 'lg-actual-size', zoomOut: 'lg-zoom-out' }`\n     * to show actual size icons instead of zoom in and zoom out icons.\n     */\n    actualSizeIcons: ActualSizeIcons;\n}\n\nexport const zoomSettings: ZoomSettings = {\n    scale: 1,\n    zoom: true,\n    actualSize: true,\n    showZoomInOutIcons: false,\n    actualSizeIcons: {\n        zoomIn: 'lg-zoom-in',\n        zoomOut: 'lg-zoom-out',\n    } as ActualSizeIcons,\n    enableZoomAfter: 300,\n};\n","import { ZoomSettings, zoomSettings } from './lg-zoom-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { lGEvents } from '../../lg-events';\n\ninterface Coords {\n    x: number;\n    y: number;\n}\ninterface ZoomTouchEvent {\n    pageX: number;\n    targetTouches: { pageY: number; pageX: number }[];\n    pageY: number;\n}\ninterface PossibleCords {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\nexport default class Zoom {\n    private core: LightGallery;\n    private settings: ZoomSettings;\n    private $LG!: LgQuery;\n    zoomableTimeout: any;\n    positionChanged!: boolean;\n    pageX!: number;\n    pageY!: number;\n    scale!: number;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        this.settings = { ...zoomSettings, ...this.core.settings };\n\n        return this;\n    }\n\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n    buildTemplates(): void {\n        let zoomIcons = this.settings.showZoomInOutIcons\n            ? `<button id=\"${this.core.getIdName(\n                  'lg-zoom-in',\n              )}\" type=\"button\" aria-label=\"Zoom in\" class=\"lg-zoom-in lg-icon\"></button><button id=\"${this.core.getIdName(\n                  'lg-zoom-out',\n              )}\" type=\"button\" aria-label=\"Zoom out\" class=\"lg-zoom-out lg-icon\"></button>`\n            : '';\n\n        if (this.settings.actualSize) {\n            zoomIcons += `<button id=\"${this.core.getIdName(\n                'lg-actual-size',\n            )}\" type=\"button\" aria-label=\"View actual size\" class=\"${\n                this.settings.actualSizeIcons.zoomIn\n            } lg-icon\"></button>`;\n        }\n\n        this.core.outer.addClass('lg-use-transition-for-zoom');\n\n        this.core.$toolbar.first().append(zoomIcons);\n    }\n\n    /**\n     * @desc Enable zoom option only once the image is completely loaded\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\n     *\n     * Zoom styles are defined under lg-zoomable CSS class.\n     */\n    enableZoom(event: CustomEvent): void {\n        // delay will be 0 except first time\n        let _speed = this.settings.enableZoomAfter + event.detail.delay;\n\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\n        if (\n            this.$LG('body').first().hasClass('lg-from-hash') &&\n            event.detail.delay\n        ) {\n            // will execute only once\n            _speed = 0;\n        } else {\n            // Remove lg-from-hash to enable starting animation.\n            this.$LG('body').first().removeClass('lg-from-hash');\n        }\n\n        this.zoomableTimeout = setTimeout(() => {\n            this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\n        }, _speed + 30);\n    }\n\n    enableZoomOnSlideItemLoad(): void {\n        // Add zoomable class\n        this.core.LGel.on(\n            `${lGEvents.slideItemLoad}.zoom`,\n            this.enableZoom.bind(this),\n        );\n    }\n\n    getModifier(rotateValue: number, axis: string, el: HTMLElement) {\n        const originalRotate = rotateValue;\n        rotateValue = Math.abs(rotateValue);\n        const transformValues = this.getCurrentTransform(el);\n        if (!transformValues) {\n            return 1;\n        }\n        let modifier = 1;\n        if (axis === 'X') {\n            const flipHorizontalValue = Math.sign(\n                parseFloat(transformValues[0]),\n            );\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                if (\n                    (originalRotate === -90 && flipHorizontalValue === 1) ||\n                    (originalRotate === 90 && flipHorizontalValue === -1)\n                ) {\n                    modifier = -1;\n                } else {\n                    modifier = 1;\n                }\n            }\n            modifier = modifier * flipHorizontalValue;\n        } else {\n            const flipVerticalValue = Math.sign(parseFloat(transformValues[3]));\n            if (rotateValue === 0 || rotateValue === 180) {\n                modifier = 1;\n            } else if (rotateValue === 90) {\n                const sinX = parseFloat(transformValues[1]);\n                const sinMinusX = parseFloat(transformValues[2]);\n                modifier = Math.sign(\n                    sinX * sinMinusX * originalRotate * flipVerticalValue,\n                );\n            }\n            modifier = modifier * flipVerticalValue;\n        }\n        return modifier;\n    }\n\n    getImageSize($image: HTMLImageElement, rotateValue: number, axis: string) {\n        const imageSizes: {\n            [key: string]: string;\n        } = {\n            y: 'offsetHeight',\n            x: 'offsetWidth',\n        };\n        if (rotateValue === 90) {\n            // Swap axis\n            if (axis === 'x') {\n                axis = 'y';\n            } else {\n                axis = 'x';\n            }\n        }\n        return (($image as unknown) as any)[imageSizes[axis]];\n    }\n\n    getDragCords(e: MouseEvent, rotateValue: number): Coords {\n        if (rotateValue === 90) {\n            return {\n                x: e.pageY,\n                y: e.pageX,\n            };\n        } else {\n            return {\n                x: e.pageX,\n                y: e.pageY,\n            };\n        }\n    }\n    getSwipeCords(e: TouchEvent, rotateValue: number): Coords {\n        const x = e.targetTouches[0].pageX;\n        const y = e.targetTouches[0].pageY;\n        if (rotateValue === 90) {\n            return {\n                x: y,\n                y: x,\n            };\n        } else {\n            return {\n                x: x,\n                y: y,\n            };\n        }\n    }\n\n    getDragAllowedAxises($image: lgQuery, rotateValue: number) {\n        const $lg = this.core.$lgContent.get();\n        const scale = parseFloat($image.attr('data-scale') as string) || 1;\n        const imgEl = $image.get() as HTMLImageElement;\n        const allowY =\n            this.getImageSize(imgEl, rotateValue, 'y') * scale >\n            $lg.clientHeight;\n        const allowX =\n            this.getImageSize(imgEl, rotateValue, 'x') * scale >\n            $lg.clientWidth;\n        if (rotateValue === 90) {\n            return {\n                allowX: allowY,\n                allowY: allowX,\n            };\n        } else {\n            return {\n                allowX: allowX,\n                allowY: allowY,\n            };\n        }\n    }\n\n    /**\n     *\n     * @param {Element} el\n     * @return matrix(cos(X), sin(X), -sin(X), cos(X), 0, 0);\n     * Get the current transform value\n     */\n    getCurrentTransform(el: HTMLElement): string[] | undefined {\n        if (!el) {\n            return;\n        }\n        const st = window.getComputedStyle(el, null);\n        const tm =\n            st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            return tm.split('(')[1].split(')')[0].split(',');\n        }\n        return;\n    }\n\n    getCurrentRotation(el: HTMLElement): number {\n        if (!el) {\n            return 0;\n        }\n        const values: string[] | undefined = this.getCurrentTransform(el);\n        if (values) {\n            return Math.round(\n                Math.atan2(parseFloat(values[1]), parseFloat(values[0])) *\n                    (180 / Math.PI),\n            );\n            // If you want rotate in 360\n            //return (angle < 0 ? angle + 360 : angle);\n        }\n        return 0;\n    }\n\n    /**\n     * @desc Image zoom\n     * Translate the wrap and scale the image to get better user experience\n     *\n     * @param {String} scale - Zoom decrement/increment value\n     */\n    zoomImage(scale: number): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const imageNode = $image.get();\n        if (!imageNode) return;\n\n        const containerRect = this.core.outer.get().getBoundingClientRect();\n        // Find offset manually to avoid issue after zoom\n        const offsetX =\n            (containerRect.width - imageNode.offsetWidth) / 2 +\n            containerRect.left;\n        const offsetY =\n            (containerRect.height - imageNode.offsetHeight) / 2 +\n            this.$LG(window).scrollTop() +\n            containerRect.top;\n        let originalX;\n        let originalY;\n\n        if (scale === 1) {\n            this.positionChanged = false;\n        }\n\n        if (this.positionChanged) {\n            originalX =\n                parseFloat($image.parent().attr('data-x')) /\n                (parseFloat($image.attr('data-scale')) - 1);\n            originalY =\n                parseFloat($image.parent().attr('data-y')) /\n                (parseFloat($image.attr('data-scale')) - 1);\n\n            this.pageX = originalX + offsetX;\n            this.pageY = originalY + offsetY;\n\n            this.positionChanged = false;\n        }\n\n        const _x = this.pageX - offsetX;\n        const _y = this.pageY - offsetY;\n\n        const x = (scale - 1) * _x;\n        const y = (scale - 1) * _y;\n\n        this.setZoomStyles({\n            x: x,\n            y: y,\n            scale,\n        });\n    }\n\n    /**\n     * @desc apply scale3d to image and translate to image wrap\n     * @param {style} X,Y and scale\n     */\n    setZoomStyles(style: { x: number; y: number; scale: number }): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const $dummyImage = this.core.outer\n            .find('.lg-current .lg-dummy-img')\n            .first();\n        const $imageWrap = $image.parent();\n\n        $image\n            .attr('data-scale', style.scale + '')\n            .css(\n                'transform',\n                'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n            );\n\n        $dummyImage.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        const transform =\n            'translate3d(-' + style.x + 'px, -' + style.y + 'px, 0)';\n        $imageWrap.css('transform', transform);\n\n        $imageWrap.attr('data-x', style.x).attr('data-y', style.y);\n    }\n\n    /**\n     * @param index - Index of the current slide\n     * @param event - event will be available only if the function is called on clicking/taping the imags\n     */\n    setActualSize(index: number, event?: ZoomTouchEvent): void {\n        const currentItem = this.core.galleryItems[this.core.index];\n        // Allow zoom only on image\n        if (\n            !currentItem.src ||\n            this.core.outer.hasClass('lg-first-slide-loading')\n        ) {\n            return;\n        }\n        const scale = this.getCurrentImageActualSizeScale();\n        if (this.core.outer.hasClass('lg-zoomed')) {\n            this.scale = 1;\n        } else {\n            this.scale = this.getScale(scale);\n        }\n        this.setPageCords(event);\n\n        this.beginZoom(this.scale);\n        this.zoomImage(this.scale);\n\n        setTimeout(() => {\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        }, 10);\n    }\n\n    getNaturalWidth(index: number): number {\n        const $image = this.core.getSlideItem(index).find('.lg-image').first();\n\n        const naturalWidth = this.core.galleryItems[index].width;\n        return naturalWidth\n            ? parseFloat(naturalWidth)\n            : undefined || ($image.get() as any).naturalWidth;\n    }\n\n    getActualSizeScale(naturalWidth: number, width: number): number {\n        let _scale;\n        let scale;\n        if (naturalWidth > width) {\n            _scale = naturalWidth / width;\n            scale = _scale || 2;\n        } else {\n            scale = 1;\n        }\n        return scale;\n    }\n\n    getCurrentImageActualSizeScale(): number {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const width = $image.get().offsetWidth;\n        const naturalWidth = this.getNaturalWidth(this.core.index) || width;\n        return this.getActualSizeScale(naturalWidth, width);\n    }\n\n    getPageCords(event?: ZoomTouchEvent): Coords {\n        const cords: Coords = {} as Coords;\n        if (event) {\n            cords.x = event.pageX || event.targetTouches[0].pageX;\n            cords.y = event.pageY || event.targetTouches[0].pageY;\n        } else {\n            const containerRect = this.core.outer.get().getBoundingClientRect();\n            cords.x = containerRect.width / 2 + containerRect.left;\n            cords.y =\n                containerRect.height / 2 +\n                this.$LG(window).scrollTop() +\n                containerRect.top;\n        }\n        return cords;\n    }\n\n    setPageCords(event?: ZoomTouchEvent): void {\n        const pageCords = this.getPageCords(event);\n\n        this.pageX = pageCords.x;\n        this.pageY = pageCords.y;\n    }\n\n    // If true, zoomed - in else zoomed out\n    beginZoom(scale: number): boolean {\n        this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n        if (scale > 1) {\n            this.core.outer.addClass('lg-zoomed');\n            const $actualSize = this.core.getElementById('lg-actual-size');\n            $actualSize\n                .removeClass(this.settings.actualSizeIcons.zoomIn)\n                .addClass(this.settings.actualSizeIcons.zoomOut);\n        } else {\n            this.resetZoom();\n        }\n        return scale > 1;\n    }\n\n    getScale(scale: number): number {\n        const actualSizeScale = this.getCurrentImageActualSizeScale();\n        if (scale < 1) {\n            scale = 1;\n        } else if (scale > actualSizeScale) {\n            scale = actualSizeScale;\n        }\n        return scale;\n    }\n\n    init(): void {\n        if (!this.settings.zoom) {\n            return;\n        }\n        this.buildTemplates();\n        this.enableZoomOnSlideItemLoad();\n\n        let tapped: ReturnType<typeof setTimeout> | null = null;\n\n        this.core.outer.on('dblclick.lg', (event) => {\n            if (!this.$LG(event.target).hasClass('lg-image')) {\n                return;\n            }\n            this.setActualSize(this.core.index, event);\n        });\n\n        this.core.outer.on('touchstart.lg', (event) => {\n            const $target = this.$LG(event.target);\n            if (\n                event.targetTouches.length === 1 &&\n                $target.hasClass('lg-image')\n            ) {\n                if (!tapped) {\n                    tapped = setTimeout(() => {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    this.setActualSize(this.core.index, event);\n                }\n\n                event.preventDefault();\n            }\n        });\n\n        // Update zoom on resize and orientationchange\n        this.core.LGel.on(`${lGEvents.containerResize}.zoom`, () => {\n            if (!this.core.lgOpened) return;\n            this.setPageCords();\n            this.zoomImage(this.scale);\n        });\n\n        this.core.getElementById('lg-zoom-out').on('click.lg', () => {\n            if (this.core.outer.find('.lg-current .lg-image').get()) {\n                this.scale -= this.settings.scale;\n\n                this.scale = this.getScale(this.scale);\n                this.beginZoom(this.scale);\n                this.zoomImage(this.scale);\n            }\n        });\n\n        this.core.getElementById('lg-zoom-in').on('click.lg', () => {\n            this.zoomIn();\n        });\n\n        this.core.getElementById('lg-actual-size').on('click.lg', () => {\n            this.setActualSize(this.core.index);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeOpen}.zoom`, () => {\n            this.core.outer.find('.lg-item').removeClass('lg-zoomable');\n        });\n\n        // Reset zoom on slide change\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.zoom`,\n            (event: CustomEvent) => {\n                const { prevIndex } = event.detail;\n                this.scale = 1;\n                this.positionChanged = false;\n                this.resetZoom(prevIndex);\n            },\n        );\n\n        // Drag option after zoom\n        this.zoomDrag();\n\n        this.pinchZoom();\n\n        this.zoomSwipe();\n\n        // Store the zoomable timeout value just to clear it while closing\n        this.zoomableTimeout = false;\n        this.positionChanged = false;\n\n        // Set the initial value center\n        this.pageX = this.core.outer.width() / 2;\n        this.pageY =\n            this.core.outer.height() / 2 + this.$LG(window).scrollTop();\n\n        this.scale = 1;\n    }\n\n    zoomIn(scale?: number): void {\n        const currentItem = this.core.galleryItems[this.core.index];\n        // Allow zoom only on image\n        if (!currentItem.src) {\n            return;\n        }\n        if (scale) {\n            this.scale = scale;\n        } else {\n            this.scale += this.settings.scale;\n        }\n\n        this.scale = this.getScale(this.scale);\n        this.beginZoom(this.scale);\n        this.zoomImage(this.scale);\n    }\n\n    // Reset zoom effect\n    resetZoom(index?: number): void {\n        this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        const $item = this.core.getSlideItem(\n            index !== undefined ? index : this.core.index,\n        );\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomOut)\n            .addClass(this.settings.actualSizeIcons.zoomIn);\n        $item.find('.lg-img-wrap').first().removeAttr('style data-x data-y');\n        $item.find('.lg-image').first().removeAttr('style data-scale');\n\n        // Reset pagx pagy values to center\n        this.setPageCords();\n    }\n\n    getTouchDistance(e: TouchEvent): number {\n        return Math.sqrt(\n            (e.targetTouches[0].pageX - e.targetTouches[1].pageX) *\n                (e.targetTouches[0].pageX - e.targetTouches[1].pageX) +\n                (e.targetTouches[0].pageY - e.targetTouches[1].pageY) *\n                    (e.targetTouches[0].pageY - e.targetTouches[1].pageY),\n        );\n    }\n\n    pinchZoom(): void {\n        let startDist = 0;\n        let pinchStarted = false;\n        let initScale = 1;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            $item = this.core.getSlideItem(this.core.index);\n            e.preventDefault();\n            if (\n                e.targetTouches.length === 2 &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                initScale = this.scale || 1;\n                this.core.outer.removeClass(\n                    'lg-zoom-drag-transition lg-zoom-dragging',\n                );\n\n                this.core.touchAction = 'pinch';\n\n                startDist = this.getTouchDistance(e);\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            e.preventDefault();\n            if (\n                e.targetTouches.length === 2 &&\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                const endDist = this.getTouchDistance(e);\n\n                const distance = startDist - endDist;\n                if (!pinchStarted && Math.abs(distance) > 5) {\n                    pinchStarted = true;\n                }\n                if (pinchStarted) {\n                    this.scale = Math.max(1, initScale + -distance * 0.008);\n\n                    this.zoomImage(this.scale);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                pinchStarted = false;\n                startDist = 0;\n                if (this.scale <= 1) {\n                    this.resetZoom();\n                } else {\n                    this.scale = this.getScale(this.scale);\n                    this.zoomImage(this.scale);\n\n                    this.core.outer.addClass('lg-zoomed');\n                }\n                this.core.touchAction = undefined;\n            }\n        });\n    }\n\n    touchendZoom(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        touchDuration: number,\n        rotateValue: number,\n    ): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n\n        let distanceXnew = endCoords.x - startCoords.x;\n        let distanceYnew = endCoords.y - startCoords.y;\n\n        let speedX = Math.abs(distanceXnew) / touchDuration + 1;\n        let speedY = Math.abs(distanceYnew) / touchDuration + 1;\n\n        if (speedX > 2) {\n            speedX += 1;\n        }\n\n        if (speedY > 2) {\n            speedY += 1;\n        }\n\n        distanceXnew = distanceXnew * speedX;\n        distanceYnew = distanceYnew * speedY;\n\n        const _LGel = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-object')\n            .first();\n        const dataX = parseFloat(_LGel.attr('data-x')) || 0;\n        const dataY = parseFloat(_LGel.attr('data-y')) || 0;\n        const distance: Coords = {} as Coords;\n\n        distance.x =\n            -Math.abs(dataX) +\n            distanceXnew * this.getModifier(rotateValue, 'X', rotateEl);\n        distance.y =\n            -Math.abs(dataY) +\n            distanceYnew * this.getModifier(rotateValue, 'Y', rotateEl);\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(\n            $image,\n            rotateValue,\n        );\n\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n            if (allowY) {\n                if (distance.y <= -possibleSwipeCords.maxY) {\n                    distance.y = -possibleSwipeCords.maxY;\n                } else if (distance.y >= -possibleSwipeCords.minY) {\n                    distance.y = -possibleSwipeCords.minY;\n                }\n            }\n\n            if (allowX) {\n                if (distance.x <= -possibleSwipeCords.maxX) {\n                    distance.x = -possibleSwipeCords.maxX;\n                } else if (distance.x >= -possibleSwipeCords.minX) {\n                    distance.x = -possibleSwipeCords.minX;\n                }\n            }\n\n            if (allowY) {\n                _LGel.attr('data-y', Math.abs(distance.y));\n            } else {\n                const dataY = parseFloat(_LGel.attr('data-y')) || 0;\n\n                distance.y = -Math.abs(dataY);\n            }\n\n            if (allowX) {\n                _LGel.attr('data-x', Math.abs(distance.x));\n            } else {\n                const dataX = parseFloat(_LGel.attr('data-x')) || 0;\n                distance.x = -Math.abs(dataX);\n            }\n\n            this.setZoomSwipeStyles(_LGel, distance);\n\n            this.positionChanged = true;\n        }\n    }\n\n    getZoomSwipeCords(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: any,\n        allowY: any,\n        possibleSwipeCords: PossibleCords,\n        dataY: number,\n        dataX: number,\n        rotateValue: number,\n        rotateEl: HTMLElement,\n    ): Coords {\n        const distance: Coords = {} as Coords;\n        if (allowY) {\n            distance.y =\n                -Math.abs(dataY) +\n                (endCoords.y - startCoords.y) *\n                    this.getModifier(rotateValue, 'Y', rotateEl);\n\n            if (distance.y <= -possibleSwipeCords.maxY) {\n                const diffMaxY = -possibleSwipeCords.maxY - distance.y;\n                distance.y = -possibleSwipeCords.maxY - diffMaxY / 6;\n            } else if (distance.y >= -possibleSwipeCords.minY) {\n                const diffMinY = distance.y - -possibleSwipeCords.minY;\n                distance.y = -possibleSwipeCords.minY + diffMinY / 6;\n            }\n        } else {\n            distance.y = -Math.abs(dataY);\n        }\n\n        if (allowX) {\n            distance.x =\n                -Math.abs(dataX) +\n                (endCoords.x - startCoords.x) *\n                    this.getModifier(rotateValue, 'X', rotateEl);\n\n            if (distance.x <= -possibleSwipeCords.maxX) {\n                const diffMaxX = -possibleSwipeCords.maxX - distance.x;\n                distance.x = -possibleSwipeCords.maxX - diffMaxX / 6;\n            } else if (distance.x >= -possibleSwipeCords.minX) {\n                const diffMinX = distance.x - -possibleSwipeCords.minX;\n                distance.x = -possibleSwipeCords.minX + diffMinX / 6;\n            }\n        } else {\n            distance.x = -Math.abs(dataX);\n        }\n\n        return distance;\n    }\n\n    getPossibleSwipeDragCords(\n        $image: lgQuery,\n        rotateValue: number,\n    ): PossibleCords {\n        const $cont = this.core.$lgContent;\n\n        const contHeight = $cont.height();\n        const contWidth = $cont.width();\n\n        const imageYSize = this.getImageSize(\n            $image.get() as HTMLImageElement,\n            rotateValue,\n            'y',\n        );\n        const imageXSize = this.getImageSize(\n            $image.get() as HTMLImageElement,\n            rotateValue,\n            'x',\n        );\n        const dataY = parseFloat($image.attr('data-scale')) || 1;\n        const elDataScale = Math.abs(dataY);\n\n        const minY = (contHeight - imageYSize) / 2;\n        const maxY = Math.abs(imageYSize * elDataScale - contHeight + minY);\n\n        const minX = (contWidth - imageXSize) / 2;\n\n        const maxX = Math.abs(imageXSize * elDataScale - contWidth + minX);\n\n        if (rotateValue === 90) {\n            return {\n                minY: minX,\n                maxY: maxX,\n                minX: minY,\n                maxX: maxY,\n            };\n        } else {\n            return {\n                minY: minY,\n                maxY: maxY,\n                minX: minX,\n                maxX: maxX,\n            };\n        }\n    }\n\n    setZoomSwipeStyles(\n        LGel: lgQuery,\n        distance: { x: number; y: number },\n    ): void {\n        LGel.css(\n            'transform',\n            'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)',\n        );\n    }\n\n    zoomSwipe(): void {\n        let startCoords = {} as Coords;\n        let endCoords = {} as Coords;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: Date = new Date();\n        let endTime: Date = new Date();\n\n        let dataX = 0;\n        let dataY = 0;\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        let rotateEl = (null as unknown) as HTMLElement;\n        let rotateValue = 0;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            e.preventDefault();\n            const currentItem = this.core.galleryItems[this.core.index];\n            // Allow zoom only on image\n            if (!currentItem.src) {\n                return;\n            }\n            $item = this.core.getSlideItem(this.core.index);\n            if (\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)) &&\n                e.targetTouches.length === 1 &&\n                this.core.outer.hasClass('lg-zoomed')\n            ) {\n                startTime = new Date();\n                this.core.touchAction = 'zoomSwipe';\n                const $image = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-object')\n                    .first();\n\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                rotateEl = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-rotate')\n                    .first()\n                    .get();\n                rotateValue = this.getCurrentRotation(rotateEl);\n\n                const dragAllowedAxises = this.getDragAllowedAxises(\n                    $image,\n                    Math.abs(rotateValue),\n                );\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (allowX || allowY) {\n                    startCoords = this.getSwipeCords(e, Math.abs(rotateValue));\n                }\n\n                dataY = parseFloat(_LGel.attr('data-y'));\n                dataX = parseFloat(_LGel.attr('data-x'));\n\n                possibleSwipeCords = this.getPossibleSwipeDragCords(\n                    $image,\n                    rotateValue,\n                );\n\n                // reset opacity and transition duration\n                this.core.outer.addClass(\n                    'lg-zoom-dragging lg-zoom-drag-transition',\n                );\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            e.preventDefault();\n            if (\n                e.targetTouches.length === 1 &&\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                this.core.touchAction = 'zoomSwipe';\n\n                endCoords = this.getSwipeCords(e, Math.abs(rotateValue));\n\n                const distance = this.getZoomSwipeCords(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    possibleSwipeCords,\n                    dataY,\n                    dataX,\n                    rotateValue,\n                    rotateEl,\n                );\n\n                if (\n                    Math.abs(endCoords.x - startCoords.x) > 15 ||\n                    Math.abs(endCoords.y - startCoords.y) > 15\n                ) {\n                    isMoved = true;\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                this.core.touchAction = undefined;\n                this.core.outer.removeClass('lg-zoom-dragging');\n                if (!isMoved) {\n                    return;\n                }\n                isMoved = false;\n                endTime = new Date();\n                const touchDuration = endTime.valueOf() - startTime.valueOf();\n                this.touchendZoom(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    touchDuration,\n                    rotateValue,\n                );\n            }\n        });\n    }\n\n    zoomDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDragging = false;\n        let isMoved = false;\n\n        let rotateEl = (null as unknown) as HTMLElement;\n        let rotateValue = 0;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: number | Date;\n        let endTime;\n\n        let possibleSwipeCords: PossibleCords;\n\n        let dataY: number;\n        let dataX: number;\n        let _LGel: lgQuery;\n\n        this.core.outer.on('mousedown.lg.zoom', (e) => {\n            const currentItem = this.core.galleryItems[this.core.index];\n            // Allow zoom only on image\n            if (!currentItem.src) {\n                return;\n            }\n            const $item = this.core.getSlideItem(this.core.index);\n            if (\n                this.$LG(e.target).hasClass('lg-item') ||\n                $item.get().contains(e.target)\n            ) {\n                startTime = new Date();\n\n                // execute only on .lg-object\n                const $image = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-object')\n                    .first();\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n                rotateEl = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-rotate')\n                    .get();\n                rotateValue = this.getCurrentRotation(rotateEl);\n\n                const dragAllowedAxises = this.getDragAllowedAxises(\n                    $image,\n                    Math.abs(rotateValue),\n                );\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n\n                if (this.core.outer.hasClass('lg-zoomed')) {\n                    if (\n                        this.$LG(e.target).hasClass('lg-object') &&\n                        (allowX || allowY)\n                    ) {\n                        e.preventDefault();\n                        startCoords = this.getDragCords(\n                            e,\n                            Math.abs(rotateValue),\n                        );\n\n                        possibleSwipeCords = this.getPossibleSwipeDragCords(\n                            $image,\n                            rotateValue,\n                        );\n\n                        isDragging = true;\n\n                        dataY = parseFloat(_LGel.attr('data-y'));\n                        dataX = parseFloat(_LGel.attr('data-x'));\n\n                        // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                        this.core.outer.get().scrollLeft += 1;\n                        this.core.outer.get().scrollLeft -= 1;\n\n                        this.core.outer\n                            .removeClass('lg-grab')\n                            .addClass(\n                                'lg-grabbing lg-zoom-drag-transition lg-zoom-dragging',\n                            );\n                        // reset opacity and transition duration\n                    }\n                }\n            }\n        });\n\n        this.$LG(window).on(\n            `mousemove.lg.zoom.global${this.core.lgId}`,\n            (e) => {\n                if (isDragging) {\n                    isMoved = true;\n                    endCoords = this.getDragCords(e, Math.abs(rotateValue));\n\n                    const distance = this.getZoomSwipeCords(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        possibleSwipeCords,\n                        dataY,\n                        dataX,\n                        rotateValue,\n                        rotateEl,\n                    );\n\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.zoom.global${this.core.lgId}`, (e) => {\n            if (isDragging) {\n                endTime = new Date();\n                isDragging = false;\n                this.core.outer.removeClass('lg-zoom-dragging');\n\n                // Fix for chrome mouse move on click\n                if (\n                    isMoved &&\n                    (startCoords.x !== endCoords.x ||\n                        startCoords.y !== endCoords.y)\n                ) {\n                    endCoords = this.getDragCords(e, Math.abs(rotateValue));\n\n                    const touchDuration =\n                        endTime.valueOf() - startTime.valueOf();\n                    this.touchendZoom(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        touchDuration,\n                        rotateValue,\n                    );\n                }\n\n                isMoved = false;\n            }\n\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        });\n    }\n\n    closeGallery(): void {\n        this.resetZoom();\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery zoom plugin\n        this.$LG(window).off(`.lg.zoom.global${this.core.lgId}`);\n        this.core.LGel.off('.lg.zoom');\n        this.core.LGel.off('.zoom');\n        clearTimeout(this.zoomableTimeout);\n        this.zoomableTimeout = false;\n    }\n}\n",null,"export interface AutoplaySettings {\n    /**\n     * Enable autoplay plugin\n     */\n    autoplay: boolean;\n\n    /**\n     * Enable slideshow autoplay\n     */\n    slideShowAutoplay: boolean;\n\n    /**\n     * The time (in ms) between each auto transition.\n     */\n    slideShowInterval: number;\n\n    /**\n     * Show autoplay progressBar\n     */\n    progressBar: boolean;\n\n    /**\n     * If false autoplay will be stopped after first user action\n     */\n    forceSlideShowAutoplay: boolean;\n\n    /**\n     * Show/hide autoplay controls.\n     */\n    autoplayControls: boolean;\n\n    /**\n     * Specify where the autoplay controls should be appended.\n     */\n    appendAutoplayControlsTo: string;\n}\nexport const autoplaySettings: AutoplaySettings = {\n    autoplay: true,\n    slideShowAutoplay: false,\n    slideShowInterval: 5000,\n    progressBar: true,\n    forceSlideShowAutoplay: false,\n    autoplayControls: true,\n    appendAutoplayControlsTo: '.lg-toolbar',\n};\n","import { lGEvents } from '../../lg-events';\nimport { LightGallery } from '../../lightgallery';\nimport { AutoplaySettings, autoplaySettings } from './lg-autoplay-settings';\n\n/**\n * Creates the autoplay plugin.\n * @param {object} element - lightGallery element\n */\nexport default class Autoplay {\n    core: LightGallery;\n    settings: AutoplaySettings;\n    interval!: any;\n    fromAuto!: boolean;\n    pausedOnTouchDrag!: boolean;\n    pausedOnSlideChange!: boolean;\n\n    constructor(instance: LightGallery) {\n        this.core = instance;\n        // extend module default settings with lightGallery core settings\n        this.settings = { ...autoplaySettings, ...this.core.settings };\n\n        return this;\n    }\n\n    public init(): void {\n        if (!this.settings.autoplay) {\n            return;\n        }\n\n        this.interval = false;\n\n        // Identify if slide happened from autoplay\n        this.fromAuto = true;\n\n        // Identify if autoplay canceled from touch/drag\n        this.pausedOnTouchDrag = false;\n\n        this.pausedOnSlideChange = false;\n\n        // append autoplay controls\n        if (this.settings.autoplayControls) {\n            this.controls();\n        }\n\n        // Create progress bar\n        if (this.settings.progressBar) {\n            this.core.$lgContent.append(\n                '<div class=\"lg-progress-bar\"><div class=\"lg-progress\"></div></div>',\n            );\n        }\n\n        // Start autoplay\n        if (this.settings.slideShowAutoplay) {\n            this.core.LGel.once(`${lGEvents.slideItemLoad}.autoplay`, () => {\n                this.startAuto();\n            });\n        }\n\n        // cancel interval on touchstart and dragstart\n        this.core.LGel.on(\n            `${lGEvents.dragStart}.autoplay touchstart.lg.autoplay`,\n            () => {\n                if (this.interval) {\n                    this.cancelAuto();\n                    this.pausedOnTouchDrag = true;\n                }\n            },\n        );\n\n        // restore autoplay if autoplay canceled from touchstart / dragstart\n        this.core.LGel.on(\n            `${lGEvents.dragEnd}.autoplay touchend.lg.autoplay`,\n            () => {\n                if (!this.interval && this.pausedOnTouchDrag) {\n                    this.startAuto();\n                    this.pausedOnTouchDrag = false;\n                }\n            },\n        );\n\n        this.core.LGel.on(`${lGEvents.beforeSlide}.autoplay`, () => {\n            this.showProgressBar();\n            if (!this.fromAuto && this.interval) {\n                this.cancelAuto();\n                this.pausedOnSlideChange = true;\n            } else {\n                this.pausedOnSlideChange = false;\n            }\n            this.fromAuto = false;\n        });\n\n        // restore autoplay if autoplay canceled from touchstart / dragstart\n        this.core.LGel.on(`${lGEvents.afterSlide}.autoplay`, () => {\n            if (\n                this.pausedOnSlideChange &&\n                !this.interval &&\n                this.settings.forceSlideShowAutoplay\n            ) {\n                this.startAuto();\n                this.pausedOnSlideChange = false;\n            }\n        });\n\n        // set progress\n        this.showProgressBar();\n    }\n\n    private showProgressBar() {\n        if (this.settings.progressBar && this.fromAuto) {\n            const _$progressBar = this.core.outer.find('.lg-progress-bar');\n            const _$progress = this.core.outer.find('.lg-progress');\n            if (this.interval) {\n                _$progress.removeAttr('style');\n                _$progressBar.removeClass('lg-start');\n                setTimeout(() => {\n                    _$progress.css(\n                        'transition',\n                        'width ' +\n                            (this.core.settings.speed +\n                                this.settings.slideShowInterval) +\n                            'ms ease 0s',\n                    );\n                    _$progressBar.addClass('lg-start');\n                }, 20);\n            }\n        }\n    }\n\n    // Manage autoplay via play/stop buttons\n    private controls() {\n        const _html =\n            '<button aria-label=\"Toggle autoplay\" type=\"button\" class=\"lg-autoplay-button lg-icon\"></button>';\n\n        // Append autoplay controls\n        this.core.outer\n            .find(this.settings.appendAutoplayControlsTo)\n            .append(_html);\n\n        this.core.outer\n            .find('.lg-autoplay-button')\n            .first()\n            .on('click.lg.autoplay', () => {\n                if (this.core.outer.hasClass('lg-show-autoplay')) {\n                    this.cancelAuto();\n                } else {\n                    if (!this.interval) {\n                        this.startAuto();\n                    }\n                }\n            });\n    }\n\n    // Autostart gallery\n    public startAuto(): void {\n        this.core.outer\n            .find('.lg-progress')\n            .css(\n                'transition',\n                'width ' +\n                    (this.core.settings.speed +\n                        this.settings.slideShowInterval) +\n                    'ms ease 0s',\n            );\n        this.core.outer.addClass('lg-show-autoplay');\n        this.core.outer.find('.lg-progress-bar').addClass('lg-start');\n\n        this.interval = setInterval(() => {\n            if (this.core.index + 1 < this.core.galleryItems.length) {\n                this.core.index++;\n            } else {\n                this.core.index = 0;\n            }\n\n            this.fromAuto = true;\n            this.core.slide(this.core.index, false, false, 'next');\n        }, this.core.settings.speed + this.settings.slideShowInterval);\n    }\n\n    // cancel Autostart\n    public cancelAuto(): void {\n        if (this.interval) {\n            this.core.outer.find('.lg-progress').removeAttr('style');\n            this.core.outer.removeClass('lg-show-autoplay');\n            this.core.outer.find('.lg-progress-bar').removeClass('lg-start');\n        }\n        clearInterval(this.interval);\n        this.interval = false;\n    }\n\n    public closeGallery(): void {\n        this.cancelAuto();\n    }\n    public destroy(): void {\n        if (this.settings.autoplay) {\n            this.core.outer.find('.lg-progress-bar').remove();\n        }\n        // Remove all event listeners added by autoplay plugin\n        this.core.LGel.off('.lg.autoplay');\n        this.core.LGel.off('.autoplay');\n    }\n}\n",null,"export interface RotateSettings {\n    /**\n     * Enable/Disable rotate option\n     */\n    rotate: boolean;\n\n    /**\n     * Enable rotate left.\n     */\n    rotateLeft: boolean;\n\n    /**\n     * Enable rotate right.\n     */\n    rotateRight: boolean;\n\n    /**\n     * Enable flip horizontal.\n     */\n    flipHorizontal: boolean;\n\n    /**\n     * Enable flip vertical.\n     */\n    flipVertical: boolean;\n}\nexport const rotateSettings = {\n    rotate: true,\n    rotateLeft: true,\n    rotateRight: true,\n    flipHorizontal: true,\n    flipVertical: true,\n};\n","import { lGEvents } from '../../lg-events';\nimport { LgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { rotateSettings, RotateSettings } from './lg-rotate-settings';\n\nexport default class Rotate {\n    core: LightGallery;\n    settings: RotateSettings;\n    rotateValuesList!: {\n        [key: string]: any;\n    };\n    private $LG!: LgQuery;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n        // extend module default settings with lightGallery core settings\n        this.settings = { ...rotateSettings, ...this.core.settings };\n\n        return this;\n    }\n    buildTemplates(): void {\n        let rotateIcons = '';\n        if (this.settings.flipVertical) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-flip-ver\" aria-label=\"flip vertical\" class=\"lg-flip-ver lg-icon\"></button>';\n        }\n        if (this.settings.flipHorizontal) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-flip-hor\" aria-label=\"Flip horizontal\" class=\"lg-flip-hor lg-icon\"></button>';\n        }\n        if (this.settings.rotateLeft) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-rotate-left\" aria-label=\"Rotate left\" class=\"lg-rotate-left lg-icon\"></button>';\n        }\n        if (this.settings.rotateRight) {\n            rotateIcons +=\n                '<button type=\"button\" id=\"lg-rotate-right\" aria-label=\"Rotate right\" class=\"lg-rotate-right lg-icon\"></button>';\n        }\n        this.core.$toolbar.append(rotateIcons);\n    }\n\n    init(): void {\n        if (!this.settings.rotate) {\n            return;\n        }\n        this.buildTemplates();\n\n        // Save rotate config for each item to persist its rotate, flip values\n        // even after navigating to diferent slides\n        this.rotateValuesList = {};\n\n        // event triggered after appending slide content\n        this.core.LGel.on(`${lGEvents.afterAppendSlide}.rotate`, (event) => {\n            const { index } = event.detail;\n            const imageWrap = this.core\n                .getSlideItem(index)\n                .find('.lg-img-wrap')\n                .first();\n\n            imageWrap.wrap('lg-img-rotate');\n        });\n\n        this.core.outer\n            .find('#lg-rotate-left')\n            .first()\n            .on('click.lg', this.rotateLeft.bind(this));\n\n        this.core.outer\n            .find('#lg-rotate-right')\n            .first()\n            .on('click.lg', this.rotateRight.bind(this));\n\n        this.core.outer\n            .find('#lg-flip-hor')\n            .first()\n            .on('click.lg', this.flipHorizontal.bind(this));\n\n        this.core.outer\n            .find('#lg-flip-ver')\n            .first()\n            .on('click.lg', this.flipVertical.bind(this));\n\n        // Reset rotate on slide change\n        this.core.LGel.on(`${lGEvents.beforeSlide}.rotate`, (event) => {\n            if (!this.rotateValuesList[event.detail.index]) {\n                this.rotateValuesList[event.detail.index] = {\n                    rotate: 0,\n                    flipHorizontal: 1,\n                    flipVertical: 1,\n                };\n            }\n        });\n    }\n\n    applyStyles(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first();\n\n        $image.css(\n            'transform',\n            'rotate(' +\n                this.rotateValuesList[this.core.index].rotate +\n                'deg)' +\n                ' scale3d(' +\n                this.rotateValuesList[this.core.index].flipHorizontal +\n                ', ' +\n                this.rotateValuesList[this.core.index].flipVertical +\n                ', 1)',\n        );\n    }\n\n    rotateLeft(): void {\n        this.rotateValuesList[this.core.index].rotate -= 90;\n        this.applyStyles();\n    }\n\n    rotateRight(): void {\n        this.rotateValuesList[this.core.index].rotate += 90;\n        this.applyStyles();\n    }\n\n    getCurrentRotation(el: HTMLElement): number {\n        if (!el) {\n            return 0;\n        }\n        const st = this.$LG(el).style();\n        const tm =\n            st.getPropertyValue('-webkit-transform') ||\n            st.getPropertyValue('-moz-transform') ||\n            st.getPropertyValue('-ms-transform') ||\n            st.getPropertyValue('-o-transform') ||\n            st.getPropertyValue('transform') ||\n            'none';\n        if (tm !== 'none') {\n            const values = tm.split('(')[1].split(')')[0].split(',') as any;\n            if (values) {\n                const angle = Math.round(\n                    Math.atan2(values[1], values[0]) * (180 / Math.PI),\n                );\n                return angle < 0 ? angle + 360 : angle;\n            }\n        }\n        return 0;\n    }\n\n    flipHorizontal(): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        const currentRotation = this.getCurrentRotation(rotateEl);\n        let rotateAxis = 'flipHorizontal';\n        if (currentRotation === 90 || currentRotation === 270) {\n            rotateAxis = 'flipVertical';\n        }\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n        this.applyStyles();\n    }\n\n    flipVertical(): void {\n        const rotateEl = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-rotate')\n            .first()\n            .get();\n        const currentRotation = this.getCurrentRotation(rotateEl);\n        let rotateAxis = 'flipVertical';\n        if (currentRotation === 90 || currentRotation === 270) {\n            rotateAxis = 'flipHorizontal';\n        }\n        this.rotateValuesList[this.core.index][rotateAxis] *= -1;\n\n        this.applyStyles();\n    }\n\n    isImageOrientationChanged(): boolean {\n        const rotateValue = this.rotateValuesList[this.core.index];\n        const isRotated = Math.abs(rotateValue.rotate) % 360 !== 0;\n        const ifFlippedHor = rotateValue.flipHorizontal < 0;\n        const ifFlippedVer = rotateValue.flipVertical < 0;\n        return isRotated || ifFlippedHor || ifFlippedVer;\n    }\n\n    closeGallery(): void {\n        if (this.isImageOrientationChanged()) {\n            this.core.getSlideItem(this.core.index).css('opacity', 0);\n        }\n        this.rotateValuesList = {};\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery rotate plugin\n        this.core.LGel.off('.lg.rotate');\n        this.core.LGel.off('.rotate');\n    }\n}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"names":["HMR_HOST","HMR_PORT","HMR_SECURE","HMR_ENV_HASH","module","bundle","HMR_BUNDLE_ID","OVERLAY_ID","OldModule","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","undefined","checkedAssets","acceptedAssets","assetsToAccept","location","protocol","indexOf","hostname","port","parent","isParcelRequire","WebSocket","getHostname","getPort","test","ws","onmessage","event","JSON","parse","type","removeErrorOverlay","assets","filter","asset","envHash","handled","forEach","didAccept","hmrAcceptCheck","root","id","depsByBundle","console","clear","hmrApply","i","length","hmrAcceptRun","window","reload","ansiDiagnostic","diagnostics","ansi","stack","codeframe","error","message","hints","join","overlay","createErrorOverlay","html","document","body","appendChild","onerror","e","onclose","warn","getElementById","remove","log","createElement","errorHTML","diagnostic","map","hint","innerHTML","modules","parents","k","d","dep","Array","isArray","concat","getParents","link","newLink","cloneNode","onload","parentNode","removeChild","setAttribute","getAttribute","split","Date","now","insertBefore","nextSibling","cssTimeout","setTimeout","links","querySelectorAll","href","servedFromHMRServer","RegExp","absolute","origin","updateLink","reloadCSS","deps","Function","output","cached","cache","some","v","cb","assetsToAlsoAccept","apply","plugins","mode","zoomFromOrigin","initMap","google","maps","Map","center","lat","lng","zoom","heading","tilt","mapId","buttons","ControlPosition","LEFT_CENTER","RIGHT_CENTER","TOP_CENTER","BOTTOM_CENTER","text","amount","position","controlDiv","controlUI","classList","add","innerText","addEventListener","adjustMap","controls","setTilt","getTilt","setHeading","getHeading","global","factory","exports","define","amd","lightGallery","__assign","Object","assign","t","s","n","arguments","p","prototype","hasOwnProperty","il","r","a","j","jl","CustomEvent","params","bubbles","cancelable","detail","evt","createEvent","initCustomEvent","Element","matches","msMatchesSelector","webkitMatchesSelector","lgQuery","selector","cssVenderPrefixes","_getSelector","firstElement","_getFirstEl","generateUUID","replace","c","Math","random","toString","context","fl","substring","querySelector","_each","func","_setCssVendorPrefix","el","cssProperty","value","property","group1","toUpperCase","style","charAt","toLowerCase","slice","isEventMatched","eventName","eventNamespace","every","attr","find","$LG","first","eq","index","parentElement","get","removeAttr","attributes","attrs","removeAttribute","wrap","className","wrapper","addClass","classNames","removeClass","hasClass","contains","hasAttribute","attribute","toggleClass","css","_this","on","events","listener","eventListeners","once","off","keys","removeEventListener","trigger","customEvent","dispatchEvent","load","url","fetch","then","res","append","insertAdjacentHTML","prepend","empty","scrollTop","documentElement","pageYOffset","scrollLeft","pageXOffset","offset","left","top","rect","getBoundingClientRect","bodyMarginLeft","marginLeft","parseFloat","currentStyle","getComputedStyle","width","clientWidth","paddingLeft","paddingRight","height","clientHeight","paddingTop","paddingBottom","defaultDynamicOptions","g","utils","getSize","container","spacing","defaultLgSize","LGel","lgSize","isResponsiveSizes","wWidth","innerWidth","size_1","responsiveWidth","parseInt","size","cWidth","cHeight","maxWidth","min","maxHeight","ratio","getTransform","bottom","imageSize","containerRect","wHeight","elWidth","elHeight","elStyle","x","borderLeft","y","borderTop","scX","scY","transform","getIframeMarkup","src","iframeWidth","iframeHeight","iframeTitle","title","getImgMarkup","altAttr","srcset","sizes","sources","srcsetAttr","sizesAttr","imgMarkup","sourceTag","sourceObj","source","key","getResponsiveSrc","srcItms","rsWidth","rsSrc","_src","splice","isImageLoaded","img","complete","naturalWidth","getVideoPosterMarkup","_poster","dummyImg","videoContStyle","_isVideo","videoClass","youtube","vimeo","getDynamicOptions","items","extraProps","getCaptionFromTitleOrAlt","exThumbImage","dynamicElements","availableDynamicOptions","__spreadArrays","item","dynamicEl","specified","dynamicAttr","convertToData","name","label","currentItem","alt","thumb","subHtml","isMobile","navigator","userAgent","lightGalleryCoreSettings","easing","speed","licenseKey","startClass","backdropDuration","startAnimationDuration","hideBarsDelay","showBarsAfter","slideDelay","supportLegacyBrowser","allowMediaOverlap","videoMaxSize","defaultCaptionHeight","ariaLabelledby","ariaDescribedby","closable","swipeToClose","closeOnTap","showCloseIcon","showMaximizeIcon","loop","escKey","keyPress","slideEndAnimation","hideControlOnEnd","mousewheel","appendSubHtmlTo","subHtmlSelectorRelative","preload","numberOfSlideItemsInDom","showAfterLoad","selectWithin","nextHtml","prevHtml","download","counter","appendCounterTo","swipeThreshold","enableSwipe","enableDrag","dynamic","mobileSettings","lGEvents","afterAppendSlide","init","hasVideo","containerResize","updateSlides","afterAppendSubHtml","beforeOpen","afterOpen","slideItemLoad","beforeSlide","afterSlide","posterClick","dragStart","dragMove","dragEnd","beforeNextSlide","beforePrevSlide","beforeClose","afterClose","lgId","LightGallery","element","options","lgOpened","lGalleryOn","lgBusy","currentItemsInDom","prevScrollTop","isDummyImageRemoved","mediaContainerPosition","generateSettings","buildModules","settings","galleryItems","getItems","normalizeSettings","validateLicense","addSlideVideoInfo","buildStructure","instance","arrow","openGalleryOnItemClick","_loop_1","this_1","$element","uuid","preventDefault","currentItemIndex","openGallery","plugin","getSlideItem","getSlideItemId","getIdName","manageSingleSlideClassName","outer","$container","subHtmlCont","addClasses","containerClassName","closeIcon","maximizeIcon","template","$lgContent","$lgComponents","$backdrop","$inner","$toolbar","outerClassNames","refreshOnResize","hideBars","manageCloseGallery","toggleMaximize","initModules","currentGalleryItem","videoInfo","__slideVideoInfo","_a","getMediaContainerPosition","top_1","currentImageSize","resizeVideoSlide","imgStyle","getDummyImgStyles","lgVideoStyle","getVideoContStyle","currentSlide","closeGallery","currentSrc","updateControls","_index","galleryItem","itemIndex","organizeSlideItems","loadContent","updateCurrentCounter","children","focus","itemsToBeInsertedToDom","getItemsToBeInsertedToDom","addHtml","setMediaContainerPosition","timeout","currentSlide_1","slide","captionHeight","thumbContainer","thumbHeight","clearTimeout","hideBarTimeout","initPictureFill","$img","picturefill","elements","counterHtml","subHtmlUrl","fL","getDummyImageContent","$currentSlide","$currentItem","_dummyImgSrc","dummyImgContent","setImgMarkup","imgContent","onLgObjectLoad","$el","delay","dummyImageLoaded","handleLgObjectLoad","isVideo","video","html5","match","wistia","rec","poster","_html5Video","responsive","srcDyItms","iframe","top_2","videoSize","markup","isFirstSlide_1","hasStartAnimation","delay_1","html5Video","hasPoster","isFirstSlide","_speed","mediaObject","loadContentOnLoad","prevIndex","numberOfItems","possibleNumberOfItems","max","prevIndexItem","_element","idx","numberOfExistingItems","getPreviousSlideIndex","currentItemId","setDownloadValue","downloadUrl","makeSlideAnimation","direction","currentSlideItem","previousSlideItem","fromTouch","fromThumb","numberOfGalleryItems","previousSlideItem_1","getSlideType","top_3","arrowDisable","touchPrev","touchNext","updateCounterTotal","touchMove","startCoords","endCoords","distanceX","pageX","distanceY","pageY","allowSwipe","swipeDirection","abs","setTranslate","offsetWidth","slideWidthAmount","gutter","opacity","innerHeight","scale","touchEnd","distance","triggerClick","distanceAbs","goToNextSlide","goToPrevSlide","target","isPosterElement","isMoved","isSwiping","$item","targetTouches","touchAction","manageSwipeClass","isDraging","_touchNext","_touchPrev","_loop","keyCode","$prev","$next","xValue","yValue","scaleX","scaleY","deltaY","isSlideElement","playButton","invalidateItems","mousedown","force","top_4","destroyModules","removeTimeout","blur","err","destroy","refresh","closeTimeout","lgThumbnail","thumbnailsSettings","thumbnail","animateThumb","currentPagerPosition","alignThumbnails","thumbWidth","thumbMargin","appendThumbnailsTo","toggleThumb","enableThumbDrag","enableThumbSwipe","thumbnailSwipeThreshold","loadYouTubeThumbnail","youTubeThumbSize","Thumbnail","thumbOuterWidth","thumbTotalWidth","translateX","thumbClickable","core","setAnimateThumbStyles","build","toggleThumbBar","thumbKeyPress","setThumbMarkup","manageActiveClassOnSlideChange","$lgThumb","$target","rebuildThumbnails","thumbOuterClassNames","$thumbOuter","setThumbItemHtml","thumbDragUtils","cords","startX","endX","newTranslateX","startTime","endTime","touchMoveTime","isDragging","onThumbTouchMove","onThumbTouchEnd","getPossibleTransformX","valueOf","touchDuration","distanceXnew","speedX","getThumbHtml","slideVideoInfo","thumbImg","getThumbItemHtml","thumbList","$thumb","lgZoom","zoomSettings","actualSize","showZoomInOutIcons","actualSizeIcons","zoomIn","zoomOut","enableZoomAfter","Zoom","buildTemplates","zoomIcons","enableZoom","zoomableTimeout","enableZoomOnSlideItemLoad","bind","getModifier","rotateValue","axis","originalRotate","transformValues","getCurrentTransform","modifier","flipHorizontalValue","sign","flipVerticalValue","sinX","sinMinusX","getImageSize","$image","imageSizes","getDragCords","getSwipeCords","getDragAllowedAxises","$lg","imgEl","allowY","allowX","st","tm","getPropertyValue","getCurrentRotation","values","round","atan2","PI","zoomImage","imageNode","offsetX","offsetY","offsetHeight","originalX","originalY","positionChanged","_x","_y","setZoomStyles","$dummyImage","$imageWrap","setActualSize","getCurrentImageActualSizeScale","getScale","setPageCords","beginZoom","getNaturalWidth","getActualSizeScale","_scale","getPageCords","pageCords","$actualSize","resetZoom","actualSizeScale","tapped","zoomDrag","pinchZoom","zoomSwipe","getTouchDistance","sqrt","startDist","pinchStarted","initScale","endDist","touchendZoom","rotateEl","distanceYnew","speedY","_LGel","dataX","dataY","possibleSwipeCords","getPossibleSwipeDragCords","maxY","minY","maxX","minX","dataY_1","dataX_1","setZoomSwipeStyles","getZoomSwipeCords","diffMaxY","diffMinY","diffMaxX","diffMinX","$cont","contHeight","contWidth","imageYSize","imageXSize","elDataScale","dragAllowedAxises","lgAutoplay","autoplaySettings","autoplay","slideShowAutoplay","slideShowInterval","progressBar","forceSlideShowAutoplay","autoplayControls","appendAutoplayControlsTo","Autoplay","interval","fromAuto","pausedOnTouchDrag","pausedOnSlideChange","startAuto","cancelAuto","showProgressBar","_$progressBar_1","_$progress_1","_html","setInterval","clearInterval","lgRotate","rotateSettings","rotate","rotateLeft","rotateRight","flipHorizontal","flipVertical","Rotate","rotateIcons","rotateValuesList","imageWrap","applyStyles","angle","currentRotation","rotateAxis","isImageOrientationChanged","isRotated","ifFlippedHor","ifFlippedVer","require","shim","defaults","Backpax","option","NodeList","move","setup","run","passive","dataset","insert","setBestImg","backgroundImage","points","reduce","ac","point_1","point","sort","pointA","pointB","newBackground","setImgRatio","overflow","right","backgroundRepeat","backgroundPosition","backgroundSize","transformStyle","backfaceVisibility","willChange","elementOffsetHeight","insertOffsetHeight","image","Image","control","windowHeight","elementHeight","insertHeight","final","requestAnimationFrame","getRandomId","substr","getScrollTop","getScrollLeft","getOffset","debounce","wait","immediate","later","callNow","RequireObjectCoercible","implementation","getPolyfill","polyfill","boundFindShim","array","predicate","args"],"version":3,"file":"index.fd532818.js.map","sourceRoot":"/__parcel_source_root/"}